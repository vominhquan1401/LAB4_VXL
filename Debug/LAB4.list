
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002aac  08002aac  00003aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ad0  08002ad0  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002ad0  08002ad0  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ad0  08002ad0  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ad0  08002ad0  00003ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ad4  08002ad4  00003ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002ad8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000010  08002ae8  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08002ae8  00004418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c22  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e28  00000000  00000000  0000cc5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0000ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000835  00000000  00000000  0000f560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017154  00000000  00000000  0000fd95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c972  00000000  00000000  00026ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084bfc  00000000  00000000  0003385b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8457  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa8  00000000  00000000  000b849c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000baf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a94 	.word	0x08002a94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002a94 	.word	0x08002a94

0800014c <ButtonInit>:
 */

#include "button.h"

//ButtonX button[3];
void ButtonInit(ButtonX *button, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	80fb      	strh	r3, [r7, #6]
	button->state = IDLE;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	2200      	movs	r2, #0
 800015e:	759a      	strb	r2, [r3, #22]
	button->KeyReg0 = NORMAL_STATE;
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	2201      	movs	r2, #1
 8000164:	601a      	str	r2, [r3, #0]
	button->KeyReg1 = NORMAL_STATE;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	2201      	movs	r2, #1
 800016a:	605a      	str	r2, [r3, #4]
	button->KeyReg2 = NORMAL_STATE;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	2201      	movs	r2, #1
 8000170:	609a      	str	r2, [r3, #8]
	button->KeyReg3 = NORMAL_STATE;
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	2201      	movs	r2, #1
 8000176:	60da      	str	r2, [r3, #12]
	button->GPIOx = GPIOx;
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	68ba      	ldr	r2, [r7, #8]
 800017c:	611a      	str	r2, [r3, #16]
	button->GPIO_Pin = GPIO_Pin;
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	88fa      	ldrh	r2, [r7, #6]
 8000182:	829a      	strh	r2, [r3, #20]
	button->FlagPressed = 0;
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	2200      	movs	r2, #0
 8000188:	619a      	str	r2, [r3, #24]
}
 800018a:	bf00      	nop
 800018c:	3714      	adds	r7, #20
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <InitThreeButton>:
void InitThreeButton() {
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	ButtonInit(&button[0], GPIOB, BTN1_Pin);
 8000198:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800019c:	4908      	ldr	r1, [pc, #32]	@ (80001c0 <InitThreeButton+0x2c>)
 800019e:	4809      	ldr	r0, [pc, #36]	@ (80001c4 <InitThreeButton+0x30>)
 80001a0:	f7ff ffd4 	bl	800014c <ButtonInit>
	ButtonInit(&button[1], GPIOB, BTN2_Pin);
 80001a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80001a8:	4905      	ldr	r1, [pc, #20]	@ (80001c0 <InitThreeButton+0x2c>)
 80001aa:	4807      	ldr	r0, [pc, #28]	@ (80001c8 <InitThreeButton+0x34>)
 80001ac:	f7ff ffce 	bl	800014c <ButtonInit>
	ButtonInit(&button[2], GPIOB, BTN3_Pin);
 80001b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80001b4:	4902      	ldr	r1, [pc, #8]	@ (80001c0 <InitThreeButton+0x2c>)
 80001b6:	4805      	ldr	r0, [pc, #20]	@ (80001cc <InitThreeButton+0x38>)
 80001b8:	f7ff ffc8 	bl	800014c <ButtonInit>
}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	40010c00 	.word	0x40010c00
 80001c4:	20000050 	.word	0x20000050
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	20000088 	.word	0x20000088

080001d0 <IsPressed>:

int TimeForKeyPress = 100;
int FlagCheckLongPressFirst = 0;
int IsPressed(int index) {
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	if (button[index].FlagPressed) {
 80001d8:	490e      	ldr	r1, [pc, #56]	@ (8000214 <IsPressed+0x44>)
 80001da:	687a      	ldr	r2, [r7, #4]
 80001dc:	4613      	mov	r3, r2
 80001de:	00db      	lsls	r3, r3, #3
 80001e0:	1a9b      	subs	r3, r3, r2
 80001e2:	009b      	lsls	r3, r3, #2
 80001e4:	440b      	add	r3, r1
 80001e6:	3318      	adds	r3, #24
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d00b      	beq.n	8000206 <IsPressed+0x36>
		button[index].FlagPressed = 0;
 80001ee:	4909      	ldr	r1, [pc, #36]	@ (8000214 <IsPressed+0x44>)
 80001f0:	687a      	ldr	r2, [r7, #4]
 80001f2:	4613      	mov	r3, r2
 80001f4:	00db      	lsls	r3, r3, #3
 80001f6:	1a9b      	subs	r3, r3, r2
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	440b      	add	r3, r1
 80001fc:	3318      	adds	r3, #24
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
		return 1;
 8000202:	2301      	movs	r3, #1
 8000204:	e000      	b.n	8000208 <IsPressed+0x38>
	}
	return 0;
 8000206:	2300      	movs	r3, #0
}
 8000208:	4618      	mov	r0, r3
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	20000050 	.word	0x20000050

08000218 <LongPressed>:

void LongPressed() {
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr

08000224 <getInput>:

void getInput(ButtonX *button) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	button->KeyReg0 = button->KeyReg1;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	601a      	str	r2, [r3, #0]
	button->KeyReg1 = button->KeyReg2;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	689a      	ldr	r2, [r3, #8]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	605a      	str	r2, [r3, #4]
	button->KeyReg2 = HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	691a      	ldr	r2, [r3, #16]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	8a9b      	ldrh	r3, [r3, #20]
 8000244:	4619      	mov	r1, r3
 8000246:	4610      	mov	r0, r2
 8000248:	f001 fbe0 	bl	8001a0c <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]

	switch (button->state) {
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	7d9b      	ldrb	r3, [r3, #22]
 8000258:	2b03      	cmp	r3, #3
 800025a:	d87e      	bhi.n	800035a <getInput+0x136>
 800025c:	a201      	add	r2, pc, #4	@ (adr r2, 8000264 <getInput+0x40>)
 800025e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000262:	bf00      	nop
 8000264:	08000275 	.word	0x08000275
 8000268:	08000283 	.word	0x08000283
 800026c:	080002d7 	.word	0x080002d7
 8000270:	08000315 	.word	0x08000315
	case IDLE:
		if (button->KeyReg2 == PRESSED_STATE) {
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d102      	bne.n	8000282 <getInput+0x5e>
			button->state = DEBOUNCE;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2201      	movs	r2, #1
 8000280:	759a      	strb	r2, [r3, #22]
		}
		//break;
	case DEBOUNCE:
		if ((button->KeyReg0 == button->KeyReg1)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	429a      	cmp	r2, r3
 800028c:	d11d      	bne.n	80002ca <getInput+0xa6>
				&& (button->KeyReg1 == button->KeyReg2)) { //ổn định
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	685a      	ldr	r2, [r3, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	429a      	cmp	r2, r3
 8000298:	d117      	bne.n	80002ca <getInput+0xa6>
			if (button->KeyReg3 != button->KeyReg2) {
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	68da      	ldr	r2, [r3, #12]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d015      	beq.n	80002d2 <getInput+0xae>
				button->KeyReg3 = button->KeyReg2;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	689a      	ldr	r2, [r3, #8]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	60da      	str	r2, [r3, #12]
				if (button->KeyReg2 == PRESSED_STATE) {
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d10d      	bne.n	80002d2 <getInput+0xae>
					button->state = PRESSED;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2202      	movs	r2, #2
 80002ba:	759a      	strb	r2, [r3, #22]
					button->FlagPressed = 1;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2201      	movs	r2, #1
 80002c0:	619a      	str	r2, [r3, #24]
					TimeForKeyPress = 100;
 80002c2:	4b28      	ldr	r3, [pc, #160]	@ (8000364 <getInput+0x140>)
 80002c4:	2264      	movs	r2, #100	@ 0x64
 80002c6:	601a      	str	r2, [r3, #0]
			if (button->KeyReg3 != button->KeyReg2) {
 80002c8:	e003      	b.n	80002d2 <getInput+0xae>
				}
			}
		} else {
			button->state = IDLE;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2200      	movs	r2, #0
 80002ce:	759a      	strb	r2, [r3, #22]
		}
		break;
 80002d0:	e043      	b.n	800035a <getInput+0x136>
			if (button->KeyReg3 != button->KeyReg2) {
 80002d2:	bf00      	nop
		break;
 80002d4:	e041      	b.n	800035a <getInput+0x136>

	case PRESSED:
		if (button->KeyReg2 == NORMAL_STATE) {
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d103      	bne.n	80002e6 <getInput+0xc2>
			button->state = IDLE;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2200      	movs	r2, #0
 80002e2:	759a      	strb	r2, [r3, #22]
					FlagCheckLongPressFirst = 1;
				}
				TimeForKeyPress = 100;
			}
		}
		break;
 80002e4:	e036      	b.n	8000354 <getInput+0x130>
			TimeForKeyPress--;
 80002e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000364 <getInput+0x140>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	3b01      	subs	r3, #1
 80002ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000364 <getInput+0x140>)
 80002ee:	6013      	str	r3, [r2, #0]
			if (TimeForKeyPress == 0) {
 80002f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000364 <getInput+0x140>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d12d      	bne.n	8000354 <getInput+0x130>
				if (button->KeyReg2 == PRESSED_STATE) {
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d105      	bne.n	800030c <getInput+0xe8>
					button->state = LONGPRESSED;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2203      	movs	r2, #3
 8000304:	759a      	strb	r2, [r3, #22]
					FlagCheckLongPressFirst = 1;
 8000306:	4b18      	ldr	r3, [pc, #96]	@ (8000368 <getInput+0x144>)
 8000308:	2201      	movs	r2, #1
 800030a:	601a      	str	r2, [r3, #0]
				TimeForKeyPress = 100;
 800030c:	4b15      	ldr	r3, [pc, #84]	@ (8000364 <getInput+0x140>)
 800030e:	2264      	movs	r2, #100	@ 0x64
 8000310:	601a      	str	r2, [r3, #0]
		break;
 8000312:	e01f      	b.n	8000354 <getInput+0x130>
	case LONGPRESSED:
		if (FlagCheckLongPressFirst) {
 8000314:	4b14      	ldr	r3, [pc, #80]	@ (8000368 <getInput+0x144>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d004      	beq.n	8000326 <getInput+0x102>
			LongPressed();
 800031c:	f7ff ff7c 	bl	8000218 <LongPressed>
			FlagCheckLongPressFirst = 0;
 8000320:	4b11      	ldr	r3, [pc, #68]	@ (8000368 <getInput+0x144>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
		}
		if (button->KeyReg2 == NORMAL_STATE) {
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d103      	bne.n	8000336 <getInput+0x112>
			button->state = IDLE;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2200      	movs	r2, #0
 8000332:	759a      	strb	r2, [r3, #22]
			if (TimeForKeyPress == 0) {
				LongPressed();
				TimeForKeyPress = 100;
			}
		}
		break;
 8000334:	e010      	b.n	8000358 <getInput+0x134>
			TimeForKeyPress--;
 8000336:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <getInput+0x140>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	3b01      	subs	r3, #1
 800033c:	4a09      	ldr	r2, [pc, #36]	@ (8000364 <getInput+0x140>)
 800033e:	6013      	str	r3, [r2, #0]
			if (TimeForKeyPress == 0) {
 8000340:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <getInput+0x140>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d107      	bne.n	8000358 <getInput+0x134>
				LongPressed();
 8000348:	f7ff ff66 	bl	8000218 <LongPressed>
				TimeForKeyPress = 100;
 800034c:	4b05      	ldr	r3, [pc, #20]	@ (8000364 <getInput+0x140>)
 800034e:	2264      	movs	r2, #100	@ 0x64
 8000350:	601a      	str	r2, [r3, #0]
		break;
 8000352:	e001      	b.n	8000358 <getInput+0x134>
		break;
 8000354:	bf00      	nop
 8000356:	e000      	b.n	800035a <getInput+0x136>
		break;
 8000358:	bf00      	nop
	}
}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000000 	.word	0x20000000
 8000368:	2000002c 	.word	0x2000002c

0800036c <getKeyInput>:

void getKeyInput() {
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	getInput(&button[0]);
 8000370:	4805      	ldr	r0, [pc, #20]	@ (8000388 <getKeyInput+0x1c>)
 8000372:	f7ff ff57 	bl	8000224 <getInput>
	getInput(&button[1]);
 8000376:	4805      	ldr	r0, [pc, #20]	@ (800038c <getKeyInput+0x20>)
 8000378:	f7ff ff54 	bl	8000224 <getInput>
	getInput(&button[2]);
 800037c:	4804      	ldr	r0, [pc, #16]	@ (8000390 <getKeyInput+0x24>)
 800037e:	f7ff ff51 	bl	8000224 <getInput>
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000050 	.word	0x20000050
 800038c:	2000006c 	.word	0x2000006c
 8000390:	20000088 	.word	0x20000088

08000394 <InitCount>:
	int CountForRedLed;
	int CountForAmberLed;
	int CountForGreenLed;
} CountTime;
CountTime count;
void InitCount() {
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	count.CountForRedLed = 0;
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <InitCount+0x20>)
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
	count.CountForAmberLed = 0;
 800039e:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <InitCount+0x20>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]
	count.CountForGreenLed = 0;
 80003a4:	4b03      	ldr	r3, [pc, #12]	@ (80003b4 <InitCount+0x20>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	20000030 	.word	0x20000030

080003b8 <displayRedLed>:
			HAL_GPIO_TogglePin(GPIOB, LED_RED_ABOVE_Pin | LED_RED_RIGHT_Pin);
			timerBlinkTraffic = 25;
		}
	}
}
void displayRedLed() {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	//static int counter;
	if (IsModifyRedLeds()) {
 80003bc:	f000 fb7a 	bl	8000ab4 <IsModifyRedLeds>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d015      	beq.n	80003f2 <displayRedLed+0x3a>
		if (IsPressed(1)) {
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff ff02 	bl	80001d0 <IsPressed>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d004      	beq.n	80003dc <displayRedLed+0x24>
			count.CountForRedLed++;
 80003d2:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <displayRedLed+0x40>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	3301      	adds	r3, #1
 80003d8:	4a07      	ldr	r2, [pc, #28]	@ (80003f8 <displayRedLed+0x40>)
 80003da:	6013      	str	r3, [r2, #0]
		}
		displayLED7SEG_ABOVE(time.CounterRed + count.CountForRedLed);
 80003dc:	4b07      	ldr	r3, [pc, #28]	@ (80003fc <displayRedLed+0x44>)
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	4b05      	ldr	r3, [pc, #20]	@ (80003f8 <displayRedLed+0x40>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4413      	add	r3, r2
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 f9fc 	bl	80007e4 <displayLED7SEG_ABOVE>
		displayLED7SEG_RIGHT(1);
 80003ec:	2001      	movs	r0, #1
 80003ee:	f000 f8a7 	bl	8000540 <displayLED7SEG_RIGHT>
	}
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000030 	.word	0x20000030
 80003fc:	2000003c 	.word	0x2000003c

08000400 <displayAmberLed>:
					LED_YELLOW_ABOVE_Pin | LED_YELLOW_RIGHT_Pin);
			timerBlinkTraffic = 25;
		}
	}
}
void displayAmberLed() {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	//static int counter;
	if (IsModifyAmberLeds()) {
 8000404:	f000 fb66 	bl	8000ad4 <IsModifyAmberLeds>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d015      	beq.n	800043a <displayAmberLed+0x3a>
		if (IsPressed(1)) {
 800040e:	2001      	movs	r0, #1
 8000410:	f7ff fede 	bl	80001d0 <IsPressed>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d004      	beq.n	8000424 <displayAmberLed+0x24>
			count.CountForAmberLed++;
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <displayAmberLed+0x40>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	3301      	adds	r3, #1
 8000420:	4a07      	ldr	r2, [pc, #28]	@ (8000440 <displayAmberLed+0x40>)
 8000422:	6053      	str	r3, [r2, #4]
		}
		displayLED7SEG_ABOVE(time.CounterYellow + count.CountForAmberLed);
 8000424:	4b07      	ldr	r3, [pc, #28]	@ (8000444 <displayAmberLed+0x44>)
 8000426:	685a      	ldr	r2, [r3, #4]
 8000428:	4b05      	ldr	r3, [pc, #20]	@ (8000440 <displayAmberLed+0x40>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	4413      	add	r3, r2
 800042e:	4618      	mov	r0, r3
 8000430:	f000 f9d8 	bl	80007e4 <displayLED7SEG_ABOVE>
		displayLED7SEG_RIGHT(2);
 8000434:	2002      	movs	r0, #2
 8000436:	f000 f883 	bl	8000540 <displayLED7SEG_RIGHT>
	}
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000030 	.word	0x20000030
 8000444:	2000003c 	.word	0x2000003c

08000448 <displayGreenLed>:
					LED_GREEN_ABOVE_Pin | LED_GREEN_RIGHT_Pin);
			timerBlinkTraffic = 25;
		}
	}
}
void displayGreenLed() {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	//static int counter;
	if (IsModifyGreenLeds()) {
 800044c:	f000 fb52 	bl	8000af4 <IsModifyGreenLeds>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d015      	beq.n	8000482 <displayGreenLed+0x3a>
		if (IsPressed(1)) {
 8000456:	2001      	movs	r0, #1
 8000458:	f7ff feba 	bl	80001d0 <IsPressed>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d004      	beq.n	800046c <displayGreenLed+0x24>
			count.CountForGreenLed++;
 8000462:	4b09      	ldr	r3, [pc, #36]	@ (8000488 <displayGreenLed+0x40>)
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	3301      	adds	r3, #1
 8000468:	4a07      	ldr	r2, [pc, #28]	@ (8000488 <displayGreenLed+0x40>)
 800046a:	6093      	str	r3, [r2, #8]
		}
		displayLED7SEG_ABOVE(time.CounterGreen + count.CountForGreenLed);
 800046c:	4b07      	ldr	r3, [pc, #28]	@ (800048c <displayGreenLed+0x44>)
 800046e:	689a      	ldr	r2, [r3, #8]
 8000470:	4b05      	ldr	r3, [pc, #20]	@ (8000488 <displayGreenLed+0x40>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	4413      	add	r3, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f9b4 	bl	80007e4 <displayLED7SEG_ABOVE>
		displayLED7SEG_RIGHT(3);
 800047c:	2003      	movs	r0, #3
 800047e:	f000 f85f 	bl	8000540 <displayLED7SEG_RIGHT>
	}
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000030 	.word	0x20000030
 800048c:	2000003c 	.word	0x2000003c

08000490 <ChangeTime>:
void ChangeTime(counter *time, int addRed, int addAmber, int addGreen) {
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
 800049c:	603b      	str	r3, [r7, #0]
	time->CounterRed = time->CounterRed + addRed;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	441a      	add	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	601a      	str	r2, [r3, #0]
	time->CounterYellow = time->CounterYellow + addAmber;
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	685a      	ldr	r2, [r3, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	441a      	add	r2, r3
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	605a      	str	r2, [r3, #4]
	time->CounterGreen = time->CounterGreen + addGreen;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	689a      	ldr	r2, [r3, #8]
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	441a      	add	r2, r3
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	609a      	str	r2, [r3, #8]
}
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <IncreaseTime>:
void IncreaseTime() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	if (time.CounterRed + count.CountForRedLed
 80004d0:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <IncreaseTime+0x48>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <IncreaseTime+0x4c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	441a      	add	r2, r3
			== (time.CounterYellow + count.CountForAmberLed + time.CounterGreen
 80004da:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <IncreaseTime+0x48>)
 80004dc:	6859      	ldr	r1, [r3, #4]
 80004de:	4b0e      	ldr	r3, [pc, #56]	@ (8000518 <IncreaseTime+0x4c>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	4419      	add	r1, r3
 80004e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <IncreaseTime+0x48>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	4419      	add	r1, r3
					+ count.CountForGreenLed)) {
 80004ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <IncreaseTime+0x4c>)
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	440b      	add	r3, r1
	if (time.CounterRed + count.CountForRedLed
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d10b      	bne.n	800050c <IncreaseTime+0x40>
		ChangeTime(&time, count.CountForRedLed, count.CountForAmberLed,
 80004f4:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <IncreaseTime+0x4c>)
 80004f6:	6819      	ldr	r1, [r3, #0]
 80004f8:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <IncreaseTime+0x4c>)
 80004fa:	685a      	ldr	r2, [r3, #4]
 80004fc:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <IncreaseTime+0x4c>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	4804      	ldr	r0, [pc, #16]	@ (8000514 <IncreaseTime+0x48>)
 8000502:	f7ff ffc5 	bl	8000490 <ChangeTime>
				count.CountForGreenLed);
		InitCount();
 8000506:	f7ff ff45 	bl	8000394 <InitCount>
	} else {
		InitCount();
	}
}
 800050a:	e001      	b.n	8000510 <IncreaseTime+0x44>
		InitCount();
 800050c:	f7ff ff42 	bl	8000394 <InitCount>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	2000003c 	.word	0x2000003c
 8000518:	20000030 	.word	0x20000030

0800051c <fsm_manual>:
	displayBlinkRedLed();
	displayBlinkAmberLed();
	displayBlinkGreenLed();
}

void fsm_manual() {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	displayRedLed();
 8000520:	f7ff ff4a 	bl	80003b8 <displayRedLed>
	displayGreenLed();
 8000524:	f7ff ff90 	bl	8000448 <displayGreenLed>
	displayAmberLed();
 8000528:	f7ff ff6a 	bl	8000400 <displayAmberLed>
	if (IsPressed(2)) {
 800052c:	2002      	movs	r0, #2
 800052e:	f7ff fe4f 	bl	80001d0 <IsPressed>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <fsm_manual+0x20>
		IncreaseTime();
 8000538:	f7ff ffc8 	bl	80004cc <IncreaseTime>
	}
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <displayLED7SEG_RIGHT>:

void displayLED7SEG_RIGHT(int number) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b08c      	sub	sp, #48	@ 0x30
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]

	int divPart = number / 10;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4aa4      	ldr	r2, [pc, #656]	@ (80007dc <displayLED7SEG_RIGHT+0x29c>)
 800054c:	fb82 1203 	smull	r1, r2, r2, r3
 8000550:	1092      	asrs	r2, r2, #2
 8000552:	17db      	asrs	r3, r3, #31
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int modPart = number % 10;
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4ba0      	ldr	r3, [pc, #640]	@ (80007dc <displayLED7SEG_RIGHT+0x29c>)
 800055c:	fb83 1302 	smull	r1, r3, r3, r2
 8000560:	1099      	asrs	r1, r3, #2
 8000562:	17d3      	asrs	r3, r2, #31
 8000564:	1ac9      	subs	r1, r1, r3
 8000566:	460b      	mov	r3, r1
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	440b      	add	r3, r1
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	62bb      	str	r3, [r7, #40]	@ 0x28

	// CONVERT TO BINARY
	int arr_1[4] = { 0, 0, 0, 0 };
 8000572:	f107 0318 	add.w	r3, r7, #24
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
	int arr_2[4] = { 0, 0, 0, 0 };
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]

	switch (divPart) {
 800058e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000590:	2b09      	cmp	r3, #9
 8000592:	d871      	bhi.n	8000678 <displayLED7SEG_RIGHT+0x138>
 8000594:	a201      	add	r2, pc, #4	@ (adr r2, 800059c <displayLED7SEG_RIGHT+0x5c>)
 8000596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059a:	bf00      	nop
 800059c:	080005c5 	.word	0x080005c5
 80005a0:	080005d7 	.word	0x080005d7
 80005a4:	080005e9 	.word	0x080005e9
 80005a8:	080005fb 	.word	0x080005fb
 80005ac:	0800060d 	.word	0x0800060d
 80005b0:	0800061f 	.word	0x0800061f
 80005b4:	08000631 	.word	0x08000631
 80005b8:	08000643 	.word	0x08000643
 80005bc:	08000655 	.word	0x08000655
 80005c0:	08000667 	.word	0x08000667
	case 0:
		arr_1[0] = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	623b      	str	r3, [r7, #32]
		arr_1[3] = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 80005d4:	e050      	b.n	8000678 <displayLED7SEG_RIGHT+0x138>
	case 1:
		arr_1[0] = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	623b      	str	r3, [r7, #32]
		arr_1[3] = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 80005e6:	e047      	b.n	8000678 <displayLED7SEG_RIGHT+0x138>
	case 2:
		arr_1[0] = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
		arr_1[3] = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 80005f8:	e03e      	b.n	8000678 <displayLED7SEG_RIGHT+0x138>
	case 3:
		arr_1[0] = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	623b      	str	r3, [r7, #32]
		arr_1[3] = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800060a:	e035      	b.n	8000678 <displayLED7SEG_RIGHT+0x138>
	case 4:
		arr_1[0] = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
		arr_1[3] = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800061c:	e02c      	b.n	8000678 <displayLED7SEG_RIGHT+0x138>
	case 5:
		arr_1[0] = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
		arr_1[3] = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800062e:	e023      	b.n	8000678 <displayLED7SEG_RIGHT+0x138>
	case 6:
		arr_1[0] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 1;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
		arr_1[3] = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8000640:	e01a      	b.n	8000678 <displayLED7SEG_RIGHT+0x138>
	case 7:
		arr_1[0] = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 1;
 800064a:	2301      	movs	r3, #1
 800064c:	623b      	str	r3, [r7, #32]
		arr_1[3] = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8000652:	e011      	b.n	8000678 <displayLED7SEG_RIGHT+0x138>
	case 8:
		arr_1[0] = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	623b      	str	r3, [r7, #32]
		arr_1[3] = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8000664:	e008      	b.n	8000678 <displayLED7SEG_RIGHT+0x138>
	case 9:
		arr_1[0] = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
		arr_1[3] = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8000676:	bf00      	nop
	}

	switch (modPart) {
 8000678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800067a:	2b09      	cmp	r3, #9
 800067c:	d870      	bhi.n	8000760 <displayLED7SEG_RIGHT+0x220>
 800067e:	a201      	add	r2, pc, #4	@ (adr r2, 8000684 <displayLED7SEG_RIGHT+0x144>)
 8000680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000684:	080006ad 	.word	0x080006ad
 8000688:	080006bf 	.word	0x080006bf
 800068c:	080006d1 	.word	0x080006d1
 8000690:	080006e3 	.word	0x080006e3
 8000694:	080006f5 	.word	0x080006f5
 8000698:	08000707 	.word	0x08000707
 800069c:	08000719 	.word	0x08000719
 80006a0:	0800072b 	.word	0x0800072b
 80006a4:	0800073d 	.word	0x0800073d
 80006a8:	0800074f 	.word	0x0800074f
	case 0:
		arr_2[0] = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
		arr_2[3] = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
		break;
 80006bc:	e050      	b.n	8000760 <displayLED7SEG_RIGHT+0x220>
	case 1:
		arr_2[0] = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
		arr_2[3] = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
		break;
 80006ce:	e047      	b.n	8000760 <displayLED7SEG_RIGHT+0x220>
	case 2:
		arr_2[0] = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	613b      	str	r3, [r7, #16]
		arr_2[3] = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
		break;
 80006e0:	e03e      	b.n	8000760 <displayLED7SEG_RIGHT+0x220>
	case 3:
		arr_2[0] = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
		arr_2[3] = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	617b      	str	r3, [r7, #20]
		break;
 80006f2:	e035      	b.n	8000760 <displayLED7SEG_RIGHT+0x220>
	case 4:
		arr_2[0] = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
		arr_2[3] = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
		break;
 8000704:	e02c      	b.n	8000760 <displayLED7SEG_RIGHT+0x220>
	case 5:
		arr_2[0] = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
		arr_2[3] = 1;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
		break;
 8000716:	e023      	b.n	8000760 <displayLED7SEG_RIGHT+0x220>
	case 6:
		arr_2[0] = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	613b      	str	r3, [r7, #16]
		arr_2[3] = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
		break;
 8000728:	e01a      	b.n	8000760 <displayLED7SEG_RIGHT+0x220>
	case 7:
		arr_2[0] = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 1;
 800072e:	2301      	movs	r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	613b      	str	r3, [r7, #16]
		arr_2[3] = 1;
 8000736:	2301      	movs	r3, #1
 8000738:	617b      	str	r3, [r7, #20]
		break;
 800073a:	e011      	b.n	8000760 <displayLED7SEG_RIGHT+0x220>
	case 8:
		arr_2[0] = 1;
 800073c:	2301      	movs	r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
		arr_2[3] = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
		break;
 800074c:	e008      	b.n	8000760 <displayLED7SEG_RIGHT+0x220>
	case 9:
		arr_2[0] = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
		arr_2[3] = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	617b      	str	r3, [r7, #20]
		break;
 800075e:	bf00      	nop
	}

	HAL_GPIO_WritePin(GPIOA, IN1_SEG1_Pin, arr_1[3]);
 8000760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000762:	b2db      	uxtb	r3, r3
 8000764:	461a      	mov	r2, r3
 8000766:	2102      	movs	r1, #2
 8000768:	481d      	ldr	r0, [pc, #116]	@ (80007e0 <displayLED7SEG_RIGHT+0x2a0>)
 800076a:	f001 f966 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN2_SEG1_Pin, arr_1[2]);
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	2104      	movs	r1, #4
 8000776:	481a      	ldr	r0, [pc, #104]	@ (80007e0 <displayLED7SEG_RIGHT+0x2a0>)
 8000778:	f001 f95f 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN3_SEG1_Pin, arr_1[1]);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	461a      	mov	r2, r3
 8000782:	2108      	movs	r1, #8
 8000784:	4816      	ldr	r0, [pc, #88]	@ (80007e0 <displayLED7SEG_RIGHT+0x2a0>)
 8000786:	f001 f958 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN4_SEG1_Pin, arr_1[0]);
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	461a      	mov	r2, r3
 8000790:	2110      	movs	r1, #16
 8000792:	4813      	ldr	r0, [pc, #76]	@ (80007e0 <displayLED7SEG_RIGHT+0x2a0>)
 8000794:	f001 f951 	bl	8001a3a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, IN1_SEG2_Pin, arr_2[3]);
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	461a      	mov	r2, r3
 800079e:	2140      	movs	r1, #64	@ 0x40
 80007a0:	480f      	ldr	r0, [pc, #60]	@ (80007e0 <displayLED7SEG_RIGHT+0x2a0>)
 80007a2:	f001 f94a 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN2_SEG2_Pin, arr_2[2]);
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	2180      	movs	r1, #128	@ 0x80
 80007ae:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <displayLED7SEG_RIGHT+0x2a0>)
 80007b0:	f001 f943 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN3_SEG2_Pin, arr_2[1]);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007be:	4808      	ldr	r0, [pc, #32]	@ (80007e0 <displayLED7SEG_RIGHT+0x2a0>)
 80007c0:	f001 f93b 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN4_SEG2_Pin, arr_2[0]);
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ce:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <displayLED7SEG_RIGHT+0x2a0>)
 80007d0:	f001 f933 	bl	8001a3a <HAL_GPIO_WritePin>
}
 80007d4:	bf00      	nop
 80007d6:	3730      	adds	r7, #48	@ 0x30
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	66666667 	.word	0x66666667
 80007e0:	40010800 	.word	0x40010800

080007e4 <displayLED7SEG_ABOVE>:

void displayLED7SEG_ABOVE(int number) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	@ 0x30
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	int divPart = number / 10;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4aa6      	ldr	r2, [pc, #664]	@ (8000a88 <displayLED7SEG_ABOVE+0x2a4>)
 80007f0:	fb82 1203 	smull	r1, r2, r2, r3
 80007f4:	1092      	asrs	r2, r2, #2
 80007f6:	17db      	asrs	r3, r3, #31
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int modPart = number % 10;
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	4ba2      	ldr	r3, [pc, #648]	@ (8000a88 <displayLED7SEG_ABOVE+0x2a4>)
 8000800:	fb83 1302 	smull	r1, r3, r3, r2
 8000804:	1099      	asrs	r1, r3, #2
 8000806:	17d3      	asrs	r3, r2, #31
 8000808:	1ac9      	subs	r1, r1, r3
 800080a:	460b      	mov	r3, r1
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	440b      	add	r3, r1
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28

	// CONVERT TO BINARY
	int arr_1[4] = { 0, 0, 0, 0 };
 8000816:	f107 0318 	add.w	r3, r7, #24
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
	int arr_2[4] = { 0, 0, 0, 0 };
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]

	switch (divPart) {
 8000832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000834:	2b09      	cmp	r3, #9
 8000836:	d871      	bhi.n	800091c <displayLED7SEG_ABOVE+0x138>
 8000838:	a201      	add	r2, pc, #4	@ (adr r2, 8000840 <displayLED7SEG_ABOVE+0x5c>)
 800083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083e:	bf00      	nop
 8000840:	08000869 	.word	0x08000869
 8000844:	0800087b 	.word	0x0800087b
 8000848:	0800088d 	.word	0x0800088d
 800084c:	0800089f 	.word	0x0800089f
 8000850:	080008b1 	.word	0x080008b1
 8000854:	080008c3 	.word	0x080008c3
 8000858:	080008d5 	.word	0x080008d5
 800085c:	080008e7 	.word	0x080008e7
 8000860:	080008f9 	.word	0x080008f9
 8000864:	0800090b 	.word	0x0800090b
	case 0:
		arr_1[0] = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
		arr_1[3] = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8000878:	e050      	b.n	800091c <displayLED7SEG_ABOVE+0x138>
	case 1:
		arr_1[0] = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
		arr_1[3] = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800088a:	e047      	b.n	800091c <displayLED7SEG_ABOVE+0x138>
	case 2:
		arr_1[0] = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
		arr_1[3] = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800089c:	e03e      	b.n	800091c <displayLED7SEG_ABOVE+0x138>
	case 3:
		arr_1[0] = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
		arr_1[3] = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 80008ae:	e035      	b.n	800091c <displayLED7SEG_ABOVE+0x138>
	case 4:
		arr_1[0] = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
		arr_1[3] = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 80008c0:	e02c      	b.n	800091c <displayLED7SEG_ABOVE+0x138>
	case 5:
		arr_1[0] = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
		arr_1[3] = 1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 80008d2:	e023      	b.n	800091c <displayLED7SEG_ABOVE+0x138>
	case 6:
		arr_1[0] = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 1;
 80008d8:	2301      	movs	r3, #1
 80008da:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
		arr_1[3] = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 80008e4:	e01a      	b.n	800091c <displayLED7SEG_ABOVE+0x138>
	case 7:
		arr_1[0] = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
		arr_1[3] = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 80008f6:	e011      	b.n	800091c <displayLED7SEG_ABOVE+0x138>
	case 8:
		arr_1[0] = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
		arr_1[3] = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8000908:	e008      	b.n	800091c <displayLED7SEG_ABOVE+0x138>
	case 9:
		arr_1[0] = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
		arr_1[1] = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
		arr_1[2] = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
		arr_1[3] = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800091a:	bf00      	nop
	}

	switch (modPart) {
 800091c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800091e:	2b09      	cmp	r3, #9
 8000920:	d870      	bhi.n	8000a04 <displayLED7SEG_ABOVE+0x220>
 8000922:	a201      	add	r2, pc, #4	@ (adr r2, 8000928 <displayLED7SEG_ABOVE+0x144>)
 8000924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000928:	08000951 	.word	0x08000951
 800092c:	08000963 	.word	0x08000963
 8000930:	08000975 	.word	0x08000975
 8000934:	08000987 	.word	0x08000987
 8000938:	08000999 	.word	0x08000999
 800093c:	080009ab 	.word	0x080009ab
 8000940:	080009bd 	.word	0x080009bd
 8000944:	080009cf 	.word	0x080009cf
 8000948:	080009e1 	.word	0x080009e1
 800094c:	080009f3 	.word	0x080009f3
	case 0:
		arr_2[0] = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
		arr_2[3] = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
		break;
 8000960:	e050      	b.n	8000a04 <displayLED7SEG_ABOVE+0x220>
	case 1:
		arr_2[0] = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
		arr_2[3] = 1;
 800096e:	2301      	movs	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
		break;
 8000972:	e047      	b.n	8000a04 <displayLED7SEG_ABOVE+0x220>
	case 2:
		arr_2[0] = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 1;
 800097c:	2301      	movs	r3, #1
 800097e:	613b      	str	r3, [r7, #16]
		arr_2[3] = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
		break;
 8000984:	e03e      	b.n	8000a04 <displayLED7SEG_ABOVE+0x220>
	case 3:
		arr_2[0] = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 1;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
		arr_2[3] = 1;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
		break;
 8000996:	e035      	b.n	8000a04 <displayLED7SEG_ABOVE+0x220>
	case 4:
		arr_2[0] = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 1;
 800099c:	2301      	movs	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
		arr_2[3] = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
		break;
 80009a8:	e02c      	b.n	8000a04 <displayLED7SEG_ABOVE+0x220>
	case 5:
		arr_2[0] = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
		arr_2[3] = 1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
		break;
 80009ba:	e023      	b.n	8000a04 <displayLED7SEG_ABOVE+0x220>
	case 6:
		arr_2[0] = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
		arr_2[3] = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
		break;
 80009cc:	e01a      	b.n	8000a04 <displayLED7SEG_ABOVE+0x220>
	case 7:
		arr_2[0] = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
		arr_2[3] = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	617b      	str	r3, [r7, #20]
		break;
 80009de:	e011      	b.n	8000a04 <displayLED7SEG_ABOVE+0x220>
	case 8:
		arr_2[0] = 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
		arr_2[3] = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
		break;
 80009f0:	e008      	b.n	8000a04 <displayLED7SEG_ABOVE+0x220>
	case 9:
		arr_2[0] = 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	60bb      	str	r3, [r7, #8]
		arr_2[1] = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
		arr_2[2] = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
		arr_2[3] = 1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
		break;
 8000a02:	bf00      	nop
	}

	HAL_GPIO_WritePin(GPIOA, IN1_SEG3_Pin, arr_1[3]);
 8000a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a0e:	481f      	ldr	r0, [pc, #124]	@ (8000a8c <displayLED7SEG_ABOVE+0x2a8>)
 8000a10:	f001 f813 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN2_SEG3_Pin, arr_1[2]);
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a1e:	481b      	ldr	r0, [pc, #108]	@ (8000a8c <displayLED7SEG_ABOVE+0x2a8>)
 8000a20:	f001 f80b 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN3_SEG3_Pin, arr_1[1]);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a2e:	4817      	ldr	r0, [pc, #92]	@ (8000a8c <displayLED7SEG_ABOVE+0x2a8>)
 8000a30:	f001 f803 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN4_SEG3_Pin, arr_1[0]);
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a3e:	4813      	ldr	r0, [pc, #76]	@ (8000a8c <displayLED7SEG_ABOVE+0x2a8>)
 8000a40:	f000 fffb 	bl	8001a3a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, IN1_SEG4_Pin, arr_2[3]);
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	461a      	mov	r2, r3
 8000a4a:	2140      	movs	r1, #64	@ 0x40
 8000a4c:	4810      	ldr	r0, [pc, #64]	@ (8000a90 <displayLED7SEG_ABOVE+0x2ac>)
 8000a4e:	f000 fff4 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN2_SEG4_Pin, arr_2[2]);
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	2180      	movs	r1, #128	@ 0x80
 8000a5a:	480d      	ldr	r0, [pc, #52]	@ (8000a90 <displayLED7SEG_ABOVE+0x2ac>)
 8000a5c:	f000 ffed 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN3_SEG4_Pin, arr_2[1]);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a6a:	4809      	ldr	r0, [pc, #36]	@ (8000a90 <displayLED7SEG_ABOVE+0x2ac>)
 8000a6c:	f000 ffe5 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN4_SEG4_Pin, arr_2[0]);
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	461a      	mov	r2, r3
 8000a76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a7a:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <displayLED7SEG_ABOVE+0x2ac>)
 8000a7c:	f000 ffdd 	bl	8001a3a <HAL_GPIO_WritePin>
}
 8000a80:	bf00      	nop
 8000a82:	3730      	adds	r7, #48	@ 0x30
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	66666667 	.word	0x66666667
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	40010c00 	.word	0x40010c00

08000a94 <IsNormalMode>:
	RELEASE, PRESS
} State;

Mode mode = NORMAL;

int IsNormalMode() {
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
	if (mode == NORMAL) {
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <IsNormalMode+0x1c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d101      	bne.n	8000aa4 <IsNormalMode+0x10>
		return 1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e000      	b.n	8000aa6 <IsNormalMode+0x12>
	}
	return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200000a4 	.word	0x200000a4

08000ab4 <IsModifyRedLeds>:
int IsModifyRedLeds() {
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	if (mode == MODIFY_RED_LEDS) {
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <IsModifyRedLeds+0x1c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d101      	bne.n	8000ac4 <IsModifyRedLeds+0x10>
		return 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <IsModifyRedLeds+0x12>
	}
	return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000a4 	.word	0x200000a4

08000ad4 <IsModifyAmberLeds>:
int IsModifyAmberLeds() {
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
	if (mode == MODIFY_AMBER_LEDS) {
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <IsModifyAmberLeds+0x1c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d101      	bne.n	8000ae4 <IsModifyAmberLeds+0x10>
		return 1;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e000      	b.n	8000ae6 <IsModifyAmberLeds+0x12>
	}
	return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	200000a4 	.word	0x200000a4

08000af4 <IsModifyGreenLeds>:
int IsModifyGreenLeds() {
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	if (mode == MODIFY_GREEN_LEDS) {
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <IsModifyGreenLeds+0x1c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d101      	bne.n	8000b04 <IsModifyGreenLeds+0x10>
		return 1;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e000      	b.n	8000b06 <IsModifyGreenLeds+0x12>
	}
	return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200000a4 	.word	0x200000a4

08000b14 <fsm_setting>:


void fsm_setting(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	switch (mode) {
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <fsm_setting+0x88>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d83a      	bhi.n	8000b96 <fsm_setting+0x82>
 8000b20:	a201      	add	r2, pc, #4	@ (adr r2, 8000b28 <fsm_setting+0x14>)
 8000b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b26:	bf00      	nop
 8000b28:	08000b39 	.word	0x08000b39
 8000b2c:	08000b4d 	.word	0x08000b4d
 8000b30:	08000b61 	.word	0x08000b61
 8000b34:	08000b75 	.word	0x08000b75
	case NORMAL: //đèn hoạt động bình thường
		if (IsPressed(0)) {
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fb49 	bl	80001d0 <IsPressed>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d021      	beq.n	8000b88 <fsm_setting+0x74>
			mode = MODIFY_RED_LEDS;
 8000b44:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <fsm_setting+0x88>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
		}
		break;
 8000b4a:	e01d      	b.n	8000b88 <fsm_setting+0x74>
	case MODIFY_RED_LEDS:
		if (IsPressed(0)) {
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fb3f 	bl	80001d0 <IsPressed>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d019      	beq.n	8000b8c <fsm_setting+0x78>
			mode = MODIFY_AMBER_LEDS;
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <fsm_setting+0x88>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
		}
		break;
 8000b5e:	e015      	b.n	8000b8c <fsm_setting+0x78>
	case MODIFY_AMBER_LEDS:
		if (IsPressed(0)) {
 8000b60:	2000      	movs	r0, #0
 8000b62:	f7ff fb35 	bl	80001d0 <IsPressed>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d011      	beq.n	8000b90 <fsm_setting+0x7c>
			mode = MODIFY_GREEN_LEDS;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <fsm_setting+0x88>)
 8000b6e:	2203      	movs	r2, #3
 8000b70:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
		}
		break;
 8000b72:	e00d      	b.n	8000b90 <fsm_setting+0x7c>
	case MODIFY_GREEN_LEDS:
		if (IsPressed(0)) {
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fb2b 	bl	80001d0 <IsPressed>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d009      	beq.n	8000b94 <fsm_setting+0x80>
			mode = NORMAL;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <fsm_setting+0x88>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
		}
		break;
 8000b86:	e005      	b.n	8000b94 <fsm_setting+0x80>
		break;
 8000b88:	bf00      	nop
 8000b8a:	e004      	b.n	8000b96 <fsm_setting+0x82>
		break;
 8000b8c:	bf00      	nop
 8000b8e:	e002      	b.n	8000b96 <fsm_setting+0x82>
		break;
 8000b90:	bf00      	nop
 8000b92:	e000      	b.n	8000b96 <fsm_setting+0x82>
		break;
 8000b94:	bf00      	nop
	}
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000a4 	.word	0x200000a4

08000ba0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8000ba8:	f7ff fbe0 	bl	800036c <getKeyInput>
	SCH_Update();
 8000bac:	f000 f9b4 	bl	8000f18 <SCH_Update>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <blinkLed>:

void blinkLed() {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <blinkLed+0x10>)
 8000bc0:	f000 ff53 	bl	8001a6a <HAL_GPIO_TogglePin>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40010800 	.word	0x40010800

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd0:	f000 fc28 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd4:	f000 f83c 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd8:	f000 f8c6 	bl	8000d68 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bdc:	f000 f878 	bl	8000cd0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000be0:	4814      	ldr	r0, [pc, #80]	@ (8000c34 <main+0x68>)
 8000be2:	f001 fb89 	bl	80022f8 <HAL_TIM_Base_Start_IT>
	InitThreeButton();
 8000be6:	f7ff fad5 	bl	8000194 <InitThreeButton>
	setTimeForTraffic(&time, 13, 3, 10);
 8000bea:	230a      	movs	r3, #10
 8000bec:	2203      	movs	r2, #3
 8000bee:	210d      	movs	r1, #13
 8000bf0:	4811      	ldr	r0, [pc, #68]	@ (8000c38 <main+0x6c>)
 8000bf2:	f000 fac5 	bl	8001180 <setTimeForTraffic>
	InitCount();
 8000bf6:	f7ff fbcd 	bl	8000394 <InitCount>
	SCH_Add_Task(getKeyInput, 0, 1);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	480f      	ldr	r0, [pc, #60]	@ (8000c3c <main+0x70>)
 8000c00:	f000 f934 	bl	8000e6c <SCH_Add_Task>
	SCH_Add_Task(blinkLed, 0, 100);
 8000c04:	2264      	movs	r2, #100	@ 0x64
 8000c06:	2100      	movs	r1, #0
 8000c08:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <main+0x74>)
 8000c0a:	f000 f92f 	bl	8000e6c <SCH_Add_Task>
	SCH_Add_Task(fsm_automatic, 0, 100);
 8000c0e:	2264      	movs	r2, #100	@ 0x64
 8000c10:	2100      	movs	r1, #0
 8000c12:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <main+0x78>)
 8000c14:	f000 f92a 	bl	8000e6c <SCH_Add_Task>
	SCH_Add_Task(fsm_setting, 0, 1);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	480a      	ldr	r0, [pc, #40]	@ (8000c48 <main+0x7c>)
 8000c1e:	f000 f925 	bl	8000e6c <SCH_Add_Task>
	SCH_Add_Task(fsm_manual, 0, 1);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2100      	movs	r1, #0
 8000c26:	4809      	ldr	r0, [pc, #36]	@ (8000c4c <main+0x80>)
 8000c28:	f000 f920 	bl	8000e6c <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_Dispatch_Task();
 8000c2c:	f000 f9d4 	bl	8000fd8 <SCH_Dispatch_Task>
 8000c30:	e7fc      	b.n	8000c2c <main+0x60>
 8000c32:	bf00      	nop
 8000c34:	200000a8 	.word	0x200000a8
 8000c38:	2000003c 	.word	0x2000003c
 8000c3c:	0800036d 	.word	0x0800036d
 8000c40:	08000bb9 	.word	0x08000bb9
 8000c44:	080013b5 	.word	0x080013b5
 8000c48:	08000b15 	.word	0x08000b15
 8000c4c:	0800051d 	.word	0x0800051d

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b090      	sub	sp, #64	@ 0x40
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	2228      	movs	r2, #40	@ 0x28
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 feec 	bl	8002a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c76:	2301      	movs	r3, #1
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7a:	2310      	movs	r3, #16
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c82:	2300      	movs	r3, #0
 8000c84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000c86:	2300      	movs	r3, #0
 8000c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 ff04 	bl	8001a9c <HAL_RCC_OscConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000c9a:	f000 f8e1 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9e:	230f      	movs	r3, #15
 8000ca0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 f971 	bl	8001fa0 <HAL_RCC_ClockConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000cc4:	f000 f8cc 	bl	8000e60 <Error_Handler>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3740      	adds	r7, #64	@ 0x40
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000cee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000cf6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d04:	2209      	movs	r2, #9
 8000d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d14:	4813      	ldr	r0, [pc, #76]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d16:	f001 fa9f 	bl	8002258 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d20:	f000 f89e 	bl	8000e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d32:	f001 fc23 	bl	800257c <HAL_TIM_ConfigClockSource>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d3c:	f000 f890 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d4e:	f001 fe05 	bl	800295c <HAL_TIMEx_MasterConfigSynchronization>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d58:	f000 f882 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200000a8 	.word	0x200000a8

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7c:	4b35      	ldr	r3, [pc, #212]	@ (8000e54 <MX_GPIO_Init+0xec>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a34      	ldr	r2, [pc, #208]	@ (8000e54 <MX_GPIO_Init+0xec>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b32      	ldr	r3, [pc, #200]	@ (8000e54 <MX_GPIO_Init+0xec>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0310 	and.w	r3, r3, #16
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d94:	4b2f      	ldr	r3, [pc, #188]	@ (8000e54 <MX_GPIO_Init+0xec>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a2e      	ldr	r2, [pc, #184]	@ (8000e54 <MX_GPIO_Init+0xec>)
 8000d9a:	f043 0320 	orr.w	r3, r3, #32
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e54 <MX_GPIO_Init+0xec>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b29      	ldr	r3, [pc, #164]	@ (8000e54 <MX_GPIO_Init+0xec>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a28      	ldr	r2, [pc, #160]	@ (8000e54 <MX_GPIO_Init+0xec>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b26      	ldr	r3, [pc, #152]	@ (8000e54 <MX_GPIO_Init+0xec>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b23      	ldr	r3, [pc, #140]	@ (8000e54 <MX_GPIO_Init+0xec>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a22      	ldr	r2, [pc, #136]	@ (8000e54 <MX_GPIO_Init+0xec>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b20      	ldr	r3, [pc, #128]	@ (8000e54 <MX_GPIO_Init+0xec>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_SEG1_Pin|IN2_SEG1_Pin|IN3_SEG1_Pin|IN4_SEG1_Pin
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f649 71fe 	movw	r1, #40958	@ 0x9ffe
 8000de2:	481d      	ldr	r0, [pc, #116]	@ (8000e58 <MX_GPIO_Init+0xf0>)
 8000de4:	f000 fe29 	bl	8001a3a <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|IN1_SEG2_Pin|IN2_SEG2_Pin|IN3_SEG2_Pin
                          |IN4_SEG2_Pin|IN1_SEG3_Pin|IN2_SEG3_Pin|IN3_SEG3_Pin
                          |IN4_SEG3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_ABOVE_Pin|LED_YELLOW_ABOVE_Pin|LED_GREEN_ABOVE_Pin|LED_RED_RIGHT_Pin
 8000de8:	2200      	movs	r2, #0
 8000dea:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8000dee:	481b      	ldr	r0, [pc, #108]	@ (8000e5c <MX_GPIO_Init+0xf4>)
 8000df0:	f000 fe23 	bl	8001a3a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_SEG1_Pin IN2_SEG1_Pin IN3_SEG1_Pin IN4_SEG1_Pin
                           PA5 IN1_SEG2_Pin IN2_SEG2_Pin IN3_SEG2_Pin
                           IN4_SEG2_Pin IN1_SEG3_Pin IN2_SEG3_Pin IN3_SEG3_Pin
                           IN4_SEG3_Pin */
  GPIO_InitStruct.Pin = IN1_SEG1_Pin|IN2_SEG1_Pin|IN3_SEG1_Pin|IN4_SEG1_Pin
 8000df4:	f649 73fe 	movw	r3, #40958	@ 0x9ffe
 8000df8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|IN1_SEG2_Pin|IN2_SEG2_Pin|IN3_SEG2_Pin
                          |IN4_SEG2_Pin|IN1_SEG3_Pin|IN2_SEG3_Pin|IN3_SEG3_Pin
                          |IN4_SEG3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4812      	ldr	r0, [pc, #72]	@ (8000e58 <MX_GPIO_Init+0xf0>)
 8000e0e:	f000 fc79 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_ABOVE_Pin LED_YELLOW_ABOVE_Pin LED_GREEN_ABOVE_Pin LED_RED_RIGHT_Pin
                           LED_YELLOW_RIGHT_Pin LED_GREEN_RIGHT_Pin IN1_SEG4_Pin IN2_SEG4_Pin
                           IN3_SEG4_Pin IN4_SEG4_Pin */
  GPIO_InitStruct.Pin = LED_RED_ABOVE_Pin|LED_YELLOW_ABOVE_Pin|LED_GREEN_ABOVE_Pin|LED_RED_RIGHT_Pin
 8000e12:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000e16:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_RIGHT_Pin|LED_GREEN_RIGHT_Pin|IN1_SEG4_Pin|IN2_SEG4_Pin
                          |IN3_SEG4_Pin|IN4_SEG4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <MX_GPIO_Init+0xf4>)
 8000e2c:	f000 fc6a 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8000e30:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000e34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_GPIO_Init+0xf4>)
 8000e46:	f000 fc5d 	bl	8001704 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3720      	adds	r7, #32
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40010c00 	.word	0x40010c00

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <Error_Handler+0x8>

08000e6c <SCH_Add_Task>:
uint8_t current_index_task = 0;

void SCH_Init(void) {
	current_index_task = 0;
}
void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
	if (current_index_task < SCH_MAX_TASKS) {
 8000e78:	4b25      	ldr	r3, [pc, #148]	@ (8000f10 <SCH_Add_Task+0xa4>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b27      	cmp	r3, #39	@ 0x27
 8000e7e:	d842      	bhi.n	8000f06 <SCH_Add_Task+0x9a>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 8000e80:	4b23      	ldr	r3, [pc, #140]	@ (8000f10 <SCH_Add_Task+0xa4>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4a23      	ldr	r2, [pc, #140]	@ (8000f14 <SCH_Add_Task+0xa8>)
 8000e88:	460b      	mov	r3, r1
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <SCH_Add_Task+0xa4>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f14 <SCH_Add_Task+0xa8>)
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD;
 8000eae:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <SCH_Add_Task+0xa4>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4a17      	ldr	r2, [pc, #92]	@ (8000f14 <SCH_Add_Task+0xa8>)
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	440b      	add	r3, r1
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3308      	adds	r3, #8
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8000ec6:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <SCH_Add_Task+0xa4>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4a11      	ldr	r2, [pc, #68]	@ (8000f14 <SCH_Add_Task+0xa8>)
 8000ece:	460b      	mov	r3, r1
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	330c      	adds	r3, #12
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <SCH_Add_Task+0xa4>)
 8000ee0:	781a      	ldrb	r2, [r3, #0]
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <SCH_Add_Task+0xa4>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <SCH_Add_Task+0xa8>)
 8000eec:	460b      	mov	r3, r1
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	3310      	adds	r3, #16
 8000ef8:	6018      	str	r0, [r3, #0]

		current_index_task++;
 8000efa:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <SCH_Add_Task+0xa4>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b03      	ldr	r3, [pc, #12]	@ (8000f10 <SCH_Add_Task+0xa4>)
 8000f04:	701a      	strb	r2, [r3, #0]
	}

}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	20000410 	.word	0x20000410
 8000f14:	200000f0 	.word	0x200000f0

08000f18 <SCH_Update>:
void SCH_Update(void) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	e048      	b.n	8000fb6 <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0) {
 8000f24:	492a      	ldr	r1, [pc, #168]	@ (8000fd0 <SCH_Update+0xb8>)
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	3304      	adds	r3, #4
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d013      	beq.n	8000f62 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 8000f3a:	4925      	ldr	r1, [pc, #148]	@ (8000fd0 <SCH_Update+0xb8>)
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	3304      	adds	r3, #4
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	1e59      	subs	r1, r3, #1
 8000f4e:	4820      	ldr	r0, [pc, #128]	@ (8000fd0 <SCH_Update+0xb8>)
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4403      	add	r3, r0
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	6019      	str	r1, [r3, #0]
 8000f60:	e026      	b.n	8000fb0 <SCH_Update+0x98>
		} else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8000f62:	491b      	ldr	r1, [pc, #108]	@ (8000fd0 <SCH_Update+0xb8>)
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	3308      	adds	r3, #8
 8000f72:	6819      	ldr	r1, [r3, #0]
 8000f74:	4816      	ldr	r0, [pc, #88]	@ (8000fd0 <SCH_Update+0xb8>)
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4403      	add	r3, r0
 8000f82:	3304      	adds	r3, #4
 8000f84:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8000f86:	4912      	ldr	r1, [pc, #72]	@ (8000fd0 <SCH_Update+0xb8>)
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	330c      	adds	r3, #12
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b2d8      	uxtb	r0, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	@ (8000fd0 <SCH_Update+0xb8>)
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	330c      	adds	r3, #12
 8000fac:	4602      	mov	r2, r0
 8000fae:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < current_index_task; i++) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <SCH_Update+0xbc>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	dbb0      	blt.n	8000f24 <SCH_Update+0xc>
		}
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200000f0 	.word	0x200000f0
 8000fd4:	20000410 	.word	0x20000410

08000fd8 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	e02b      	b.n	800103c <SCH_Dispatch_Task+0x64>
		if (SCH_tasks_G[i].RunMe > 0) {
 8000fe4:	491b      	ldr	r1, [pc, #108]	@ (8001054 <SCH_Dispatch_Task+0x7c>)
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	330c      	adds	r3, #12
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d01d      	beq.n	8001036 <SCH_Dispatch_Task+0x5e>
			SCH_tasks_G[i].RunMe--;
 8000ffa:	4916      	ldr	r1, [pc, #88]	@ (8001054 <SCH_Dispatch_Task+0x7c>)
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	330c      	adds	r3, #12
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	b2d8      	uxtb	r0, r3
 8001010:	4910      	ldr	r1, [pc, #64]	@ (8001054 <SCH_Dispatch_Task+0x7c>)
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	330c      	adds	r3, #12
 8001020:	4602      	mov	r2, r0
 8001022:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8001024:	490b      	ldr	r1, [pc, #44]	@ (8001054 <SCH_Dispatch_Task+0x7c>)
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4798      	blx	r3
	for (int i = 0; i < current_index_task; i++) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3301      	adds	r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <SCH_Dispatch_Task+0x80>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4293      	cmp	r3, r2
 8001046:	dbcd      	blt.n	8000fe4 <SCH_Dispatch_Task+0xc>
		}
	}
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000f0 	.word	0x200000f0
 8001058:	20000410 	.word	0x20000410

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_MspInit+0x5c>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	4a14      	ldr	r2, [pc, #80]	@ (80010b8 <HAL_MspInit+0x5c>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6193      	str	r3, [r2, #24]
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_MspInit+0x5c>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <HAL_MspInit+0x5c>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a0e      	ldr	r2, [pc, #56]	@ (80010b8 <HAL_MspInit+0x5c>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_MspInit+0x5c>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001092:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <HAL_MspInit+0x60>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_MspInit+0x60>)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010d0:	d113      	bne.n	80010fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <HAL_TIM_Base_MspInit+0x44>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <HAL_TIM_Base_MspInit+0x44>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <HAL_TIM_Base_MspInit+0x44>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2101      	movs	r1, #1
 80010ee:	201c      	movs	r0, #28
 80010f0:	f000 fad1 	bl	8001696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f4:	201c      	movs	r0, #28
 80010f6:	f000 faea 	bl	80016ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <NMI_Handler+0x4>

08001110 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <MemManage_Handler+0x4>

08001120 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <UsageFault_Handler+0x4>

08001130 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 f9aa 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001164:	4802      	ldr	r0, [pc, #8]	@ (8001170 <TIM2_IRQHandler+0x10>)
 8001166:	f001 f919 	bl	800239c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200000a8 	.word	0x200000a8

08001174 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <setTimeForTraffic>:
#include "traffic_jam.h"
#include "display.h"
#include "timer.h"
#include "input_processing.h"
//counter time = { 0 };
void setTimeForTraffic(counter *time, int red, int yellow, int green) {
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	603b      	str	r3, [r7, #0]
	time->CounterRed = red;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	601a      	str	r2, [r3, #0]
	time->CounterYellow = yellow;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	605a      	str	r2, [r3, #4]
	time->CounterGreen = green;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	609a      	str	r2, [r3, #8]
	time->count = red;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	60da      	str	r2, [r3, #12]
	time->direction = 0;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <checkTime>:
void checkTime(counter *time) {
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	if (time->CounterRed > 99) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b63      	cmp	r3, #99	@ 0x63
 80011c4:	dd02      	ble.n	80011cc <checkTime+0x16>
		time->CounterRed = 0;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
	}
	if (time->CounterYellow > 99) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b63      	cmp	r3, #99	@ 0x63
 80011d2:	dd02      	ble.n	80011da <checkTime+0x24>
		time->CounterYellow = 0;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
	}
	if (time->CounterGreen > 99) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b63      	cmp	r3, #99	@ 0x63
 80011e0:	dd02      	ble.n	80011e8 <checkTime+0x32>
		time->CounterGreen = 0;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
	}
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr

080011f2 <set_light>:
void set_light(GPIO_TypeDef *GPIOx, uint16_t red, uint16_t yellow,
		uint16_t green, uint8_t state) {
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	4608      	mov	r0, r1
 80011fc:	4611      	mov	r1, r2
 80011fe:	461a      	mov	r2, r3
 8001200:	4603      	mov	r3, r0
 8001202:	817b      	strh	r3, [r7, #10]
 8001204:	460b      	mov	r3, r1
 8001206:	813b      	strh	r3, [r7, #8]
 8001208:	4613      	mov	r3, r2
 800120a:	80fb      	strh	r3, [r7, #6]
	if (state == 0) { // đỏ
 800120c:	7e3b      	ldrb	r3, [r7, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10f      	bne.n	8001232 <set_light+0x40>
		HAL_GPIO_WritePin(GPIOx, red, GPIO_PIN_SET);
 8001212:	897b      	ldrh	r3, [r7, #10]
 8001214:	2201      	movs	r2, #1
 8001216:	4619      	mov	r1, r3
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f000 fc0e 	bl	8001a3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, yellow | green, GPIO_PIN_RESET);
 800121e:	893a      	ldrh	r2, [r7, #8]
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	4313      	orrs	r3, r2
 8001224:	b29b      	uxth	r3, r3
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f000 fc05 	bl	8001a3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, red | green, GPIO_PIN_RESET);
	} else if (state == 2) { //xanh
		HAL_GPIO_WritePin(GPIOx, green, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOx, red | yellow, GPIO_PIN_RESET);
	}
}
 8001230:	e024      	b.n	800127c <set_light+0x8a>
	} else if (state == 1) { //vàng
 8001232:	7e3b      	ldrb	r3, [r7, #24]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d10f      	bne.n	8001258 <set_light+0x66>
		HAL_GPIO_WritePin(GPIOx, yellow, GPIO_PIN_SET);
 8001238:	893b      	ldrh	r3, [r7, #8]
 800123a:	2201      	movs	r2, #1
 800123c:	4619      	mov	r1, r3
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 fbfb 	bl	8001a3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, red | green, GPIO_PIN_RESET);
 8001244:	897a      	ldrh	r2, [r7, #10]
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	4313      	orrs	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f000 fbf2 	bl	8001a3a <HAL_GPIO_WritePin>
}
 8001256:	e011      	b.n	800127c <set_light+0x8a>
	} else if (state == 2) { //xanh
 8001258:	7e3b      	ldrb	r3, [r7, #24]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d10e      	bne.n	800127c <set_light+0x8a>
		HAL_GPIO_WritePin(GPIOx, green, GPIO_PIN_SET);
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	2201      	movs	r2, #1
 8001262:	4619      	mov	r1, r3
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 fbe8 	bl	8001a3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, red | yellow, GPIO_PIN_RESET);
 800126a:	897a      	ldrh	r2, [r7, #10]
 800126c:	893b      	ldrh	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
 8001270:	b29b      	uxth	r3, r3
 8001272:	2200      	movs	r2, #0
 8001274:	4619      	mov	r1, r3
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 fbdf 	bl	8001a3a <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <trafficNormal>:

void trafficNormal(counter *time) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af02      	add	r7, sp, #8
 800128a:	6078      	str	r0, [r7, #4]
	if (time->direction == 0) {
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d137      	bne.n	8001304 <trafficNormal+0x80>
		if (time->count <= time->CounterRed) { // Thằng trên đang đỏ
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	dc6c      	bgt.n	800137a <trafficNormal+0xf6>
			set_light(GPIOB, LED_RED_ABOVE_Pin, LED_YELLOW_ABOVE_Pin,
 80012a0:	2300      	movs	r3, #0
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2304      	movs	r3, #4
 80012a6:	2202      	movs	r2, #2
 80012a8:	2101      	movs	r1, #1
 80012aa:	4841      	ldr	r0, [pc, #260]	@ (80013b0 <trafficNormal+0x12c>)
 80012ac:	f7ff ffa1 	bl	80011f2 <set_light>
			LED_GREEN_ABOVE_Pin, 0);
			displayLED7SEG_ABOVE(time->count);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fa95 	bl	80007e4 <displayLED7SEG_ABOVE>
			if (time->count >= time->CounterYellow) {
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	db10      	blt.n	80012e8 <trafficNormal+0x64>
				set_light(GPIOB, LED_RED_RIGHT_Pin, LED_YELLOW_RIGHT_Pin,
 80012c6:	2302      	movs	r3, #2
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2320      	movs	r3, #32
 80012cc:	2210      	movs	r2, #16
 80012ce:	2108      	movs	r1, #8
 80012d0:	4837      	ldr	r0, [pc, #220]	@ (80013b0 <trafficNormal+0x12c>)
 80012d2:	f7ff ff8e 	bl	80011f2 <set_light>
				LED_GREEN_RIGHT_Pin, 2);
				displayLED7SEG_RIGHT(time->count - time->CounterYellow);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f92d 	bl	8000540 <displayLED7SEG_RIGHT>
 80012e6:	e048      	b.n	800137a <trafficNormal+0xf6>
			} else {
				set_light(GPIOB, LED_RED_RIGHT_Pin, LED_YELLOW_RIGHT_Pin,
 80012e8:	2301      	movs	r3, #1
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2320      	movs	r3, #32
 80012ee:	2210      	movs	r2, #16
 80012f0:	2108      	movs	r1, #8
 80012f2:	482f      	ldr	r0, [pc, #188]	@ (80013b0 <trafficNormal+0x12c>)
 80012f4:	f7ff ff7d 	bl	80011f2 <set_light>
				LED_GREEN_RIGHT_Pin, 1);
				displayLED7SEG_RIGHT(time->count);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f91f 	bl	8000540 <displayLED7SEG_RIGHT>
 8001302:	e03a      	b.n	800137a <trafficNormal+0xf6>
			}
		}
	} else if (time->direction == 1) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d136      	bne.n	800137a <trafficNormal+0xf6>
		if (time->count <= time->CounterRed) { // Thằng phải đang đỏ
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	dc30      	bgt.n	800137a <trafficNormal+0xf6>
			set_light(GPIOB, LED_RED_RIGHT_Pin, LED_YELLOW_RIGHT_Pin,
 8001318:	2300      	movs	r3, #0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2320      	movs	r3, #32
 800131e:	2210      	movs	r2, #16
 8001320:	2108      	movs	r1, #8
 8001322:	4823      	ldr	r0, [pc, #140]	@ (80013b0 <trafficNormal+0x12c>)
 8001324:	f7ff ff65 	bl	80011f2 <set_light>
			LED_GREEN_RIGHT_Pin, 0);
			displayLED7SEG_RIGHT(time->count);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f907 	bl	8000540 <displayLED7SEG_RIGHT>
			if (time->count >= time->CounterYellow) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	429a      	cmp	r2, r3
 800133c:	db10      	blt.n	8001360 <trafficNormal+0xdc>
				set_light(GPIOB, LED_RED_ABOVE_Pin, LED_YELLOW_ABOVE_Pin,
 800133e:	2302      	movs	r3, #2
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2304      	movs	r3, #4
 8001344:	2202      	movs	r2, #2
 8001346:	2101      	movs	r1, #1
 8001348:	4819      	ldr	r0, [pc, #100]	@ (80013b0 <trafficNormal+0x12c>)
 800134a:	f7ff ff52 	bl	80011f2 <set_light>
				LED_GREEN_ABOVE_Pin, 2);
				displayLED7SEG_ABOVE(time->count - time->CounterYellow);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fa43 	bl	80007e4 <displayLED7SEG_ABOVE>
 800135e:	e00c      	b.n	800137a <trafficNormal+0xf6>
			} else {
				set_light(GPIOB, LED_RED_ABOVE_Pin, LED_YELLOW_ABOVE_Pin,
 8001360:	2301      	movs	r3, #1
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2304      	movs	r3, #4
 8001366:	2202      	movs	r2, #2
 8001368:	2101      	movs	r1, #1
 800136a:	4811      	ldr	r0, [pc, #68]	@ (80013b0 <trafficNormal+0x12c>)
 800136c:	f7ff ff41 	bl	80011f2 <set_light>
				LED_GREEN_ABOVE_Pin, 1);
				displayLED7SEG_ABOVE(time->count);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fa35 	bl	80007e4 <displayLED7SEG_ABOVE>
			}
		}
	}
	time->count--;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	1e5a      	subs	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	60da      	str	r2, [r3, #12]
	if (time->count <= 0) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	dc0d      	bgt.n	80013a8 <trafficNormal+0x124>
		time->count = time->CounterRed;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	60da      	str	r2, [r3, #12]
		time->direction = !time->direction;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf0c      	ite	eq
 800139c:	2301      	moveq	r3, #1
 800139e:	2300      	movne	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	611a      	str	r2, [r3, #16]
	}
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40010c00 	.word	0x40010c00

080013b4 <fsm_automatic>:
void fsm_automatic() {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	if (IsNormalMode()) {
 80013b8:	f7ff fb6c 	bl	8000a94 <IsNormalMode>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <fsm_automatic+0x1a>
		trafficNormal(&time);
 80013c2:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <fsm_automatic+0x20>)
 80013c4:	f7ff ff5e 	bl	8001284 <trafficNormal>
		checkTime(&time);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <fsm_automatic+0x20>)
 80013ca:	f7ff fef4 	bl	80011b6 <checkTime>
	}
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000003c 	.word	0x2000003c

080013d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d8:	f7ff fecc 	bl	8001174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013dc:	480b      	ldr	r0, [pc, #44]	@ (800140c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013de:	490c      	ldr	r1, [pc, #48]	@ (8001410 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001414 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a09      	ldr	r2, [pc, #36]	@ (8001418 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013f4:	4c09      	ldr	r4, [pc, #36]	@ (800141c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001402:	f001 fb23 	bl	8002a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001406:	f7ff fbe1 	bl	8000bcc <main>
  bx lr
 800140a:	4770      	bx	lr
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001410:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001414:	08002ad8 	.word	0x08002ad8
  ldr r2, =_sbss
 8001418:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800141c:	20000418 	.word	0x20000418

08001420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC1_2_IRQHandler>
	...

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <HAL_Init+0x28>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a07      	ldr	r2, [pc, #28]	@ (800144c <HAL_Init+0x28>)
 800142e:	f043 0310 	orr.w	r3, r3, #16
 8001432:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 f923 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f808 	bl	8001450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001440:	f7ff fe0c 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40022000 	.word	0x40022000

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <HAL_InitTick+0x54>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <HAL_InitTick+0x58>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f93b 	bl	80016ea <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00e      	b.n	800149c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d80a      	bhi.n	800149a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f000 f903 	bl	8001696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001490:	4a06      	ldr	r2, [pc, #24]	@ (80014ac <HAL_InitTick+0x5c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000004 	.word	0x20000004
 80014a8:	2000000c 	.word	0x2000000c
 80014ac:	20000008 	.word	0x20000008

080014b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_IncTick+0x1c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <HAL_IncTick+0x20>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a03      	ldr	r2, [pc, #12]	@ (80014d0 <HAL_IncTick+0x20>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	2000000c 	.word	0x2000000c
 80014d0:	20000414 	.word	0x20000414

080014d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b02      	ldr	r3, [pc, #8]	@ (80014e4 <HAL_GetTick+0x10>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	20000414 	.word	0x20000414

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4906      	ldr	r1, [pc, #24]	@ (8001580 <__NVIC_EnableIRQ+0x34>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	@ (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	@ (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	@ 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800164c:	d301      	bcc.n	8001652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164e:	2301      	movs	r3, #1
 8001650:	e00f      	b.n	8001672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <SysTick_Config+0x40>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165a:	210f      	movs	r1, #15
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f7ff ff90 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <SysTick_Config+0x40>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166a:	4b04      	ldr	r3, [pc, #16]	@ (800167c <SysTick_Config+0x40>)
 800166c:	2207      	movs	r2, #7
 800166e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	e000e010 	.word	0xe000e010

08001680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff2d 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff42 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ff90 	bl	80015d8 <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff5f 	bl	8001584 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff35 	bl	800154c <__NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffa2 	bl	800163c <SysTick_Config>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b480      	push	{r7}
 8001706:	b08b      	sub	sp, #44	@ 0x2c
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001716:	e169      	b.n	80019ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001718:	2201      	movs	r2, #1
 800171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 8158 	bne.w	80019e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4a9a      	ldr	r2, [pc, #616]	@ (80019a4 <HAL_GPIO_Init+0x2a0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d05e      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 8001740:	4a98      	ldr	r2, [pc, #608]	@ (80019a4 <HAL_GPIO_Init+0x2a0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d875      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 8001746:	4a98      	ldr	r2, [pc, #608]	@ (80019a8 <HAL_GPIO_Init+0x2a4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d058      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 800174c:	4a96      	ldr	r2, [pc, #600]	@ (80019a8 <HAL_GPIO_Init+0x2a4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d86f      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 8001752:	4a96      	ldr	r2, [pc, #600]	@ (80019ac <HAL_GPIO_Init+0x2a8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d052      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 8001758:	4a94      	ldr	r2, [pc, #592]	@ (80019ac <HAL_GPIO_Init+0x2a8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d869      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 800175e:	4a94      	ldr	r2, [pc, #592]	@ (80019b0 <HAL_GPIO_Init+0x2ac>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d04c      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 8001764:	4a92      	ldr	r2, [pc, #584]	@ (80019b0 <HAL_GPIO_Init+0x2ac>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d863      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 800176a:	4a92      	ldr	r2, [pc, #584]	@ (80019b4 <HAL_GPIO_Init+0x2b0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d046      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 8001770:	4a90      	ldr	r2, [pc, #576]	@ (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d85d      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 8001776:	2b12      	cmp	r3, #18
 8001778:	d82a      	bhi.n	80017d0 <HAL_GPIO_Init+0xcc>
 800177a:	2b12      	cmp	r3, #18
 800177c:	d859      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 800177e:	a201      	add	r2, pc, #4	@ (adr r2, 8001784 <HAL_GPIO_Init+0x80>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	080017ff 	.word	0x080017ff
 8001788:	080017d9 	.word	0x080017d9
 800178c:	080017eb 	.word	0x080017eb
 8001790:	0800182d 	.word	0x0800182d
 8001794:	08001833 	.word	0x08001833
 8001798:	08001833 	.word	0x08001833
 800179c:	08001833 	.word	0x08001833
 80017a0:	08001833 	.word	0x08001833
 80017a4:	08001833 	.word	0x08001833
 80017a8:	08001833 	.word	0x08001833
 80017ac:	08001833 	.word	0x08001833
 80017b0:	08001833 	.word	0x08001833
 80017b4:	08001833 	.word	0x08001833
 80017b8:	08001833 	.word	0x08001833
 80017bc:	08001833 	.word	0x08001833
 80017c0:	08001833 	.word	0x08001833
 80017c4:	08001833 	.word	0x08001833
 80017c8:	080017e1 	.word	0x080017e1
 80017cc:	080017f5 	.word	0x080017f5
 80017d0:	4a79      	ldr	r2, [pc, #484]	@ (80019b8 <HAL_GPIO_Init+0x2b4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017d6:	e02c      	b.n	8001832 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	623b      	str	r3, [r7, #32]
          break;
 80017de:	e029      	b.n	8001834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	3304      	adds	r3, #4
 80017e6:	623b      	str	r3, [r7, #32]
          break;
 80017e8:	e024      	b.n	8001834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	3308      	adds	r3, #8
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e01f      	b.n	8001834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	330c      	adds	r3, #12
 80017fa:	623b      	str	r3, [r7, #32]
          break;
 80017fc:	e01a      	b.n	8001834 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001806:	2304      	movs	r3, #4
 8001808:	623b      	str	r3, [r7, #32]
          break;
 800180a:	e013      	b.n	8001834 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d105      	bne.n	8001820 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001814:	2308      	movs	r3, #8
 8001816:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	611a      	str	r2, [r3, #16]
          break;
 800181e:	e009      	b.n	8001834 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001820:	2308      	movs	r3, #8
 8001822:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	615a      	str	r2, [r3, #20]
          break;
 800182a:	e003      	b.n	8001834 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
          break;
 8001830:	e000      	b.n	8001834 <HAL_GPIO_Init+0x130>
          break;
 8001832:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2bff      	cmp	r3, #255	@ 0xff
 8001838:	d801      	bhi.n	800183e <HAL_GPIO_Init+0x13a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	e001      	b.n	8001842 <HAL_GPIO_Init+0x13e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3304      	adds	r3, #4
 8001842:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2bff      	cmp	r3, #255	@ 0xff
 8001848:	d802      	bhi.n	8001850 <HAL_GPIO_Init+0x14c>
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	e002      	b.n	8001856 <HAL_GPIO_Init+0x152>
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	3b08      	subs	r3, #8
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	210f      	movs	r1, #15
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	401a      	ands	r2, r3
 8001868:	6a39      	ldr	r1, [r7, #32]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	431a      	orrs	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 80b1 	beq.w	80019e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001884:	4b4d      	ldr	r3, [pc, #308]	@ (80019bc <HAL_GPIO_Init+0x2b8>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a4c      	ldr	r2, [pc, #304]	@ (80019bc <HAL_GPIO_Init+0x2b8>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b4a      	ldr	r3, [pc, #296]	@ (80019bc <HAL_GPIO_Init+0x2b8>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800189c:	4a48      	ldr	r2, [pc, #288]	@ (80019c0 <HAL_GPIO_Init+0x2bc>)
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a40      	ldr	r2, [pc, #256]	@ (80019c4 <HAL_GPIO_Init+0x2c0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d013      	beq.n	80018f0 <HAL_GPIO_Init+0x1ec>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a3f      	ldr	r2, [pc, #252]	@ (80019c8 <HAL_GPIO_Init+0x2c4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d00d      	beq.n	80018ec <HAL_GPIO_Init+0x1e8>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a3e      	ldr	r2, [pc, #248]	@ (80019cc <HAL_GPIO_Init+0x2c8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d007      	beq.n	80018e8 <HAL_GPIO_Init+0x1e4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a3d      	ldr	r2, [pc, #244]	@ (80019d0 <HAL_GPIO_Init+0x2cc>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_GPIO_Init+0x1e0>
 80018e0:	2303      	movs	r3, #3
 80018e2:	e006      	b.n	80018f2 <HAL_GPIO_Init+0x1ee>
 80018e4:	2304      	movs	r3, #4
 80018e6:	e004      	b.n	80018f2 <HAL_GPIO_Init+0x1ee>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x1ee>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_GPIO_Init+0x1ee>
 80018f0:	2300      	movs	r3, #0
 80018f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f4:	f002 0203 	and.w	r2, r2, #3
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	4093      	lsls	r3, r2
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001902:	492f      	ldr	r1, [pc, #188]	@ (80019c0 <HAL_GPIO_Init+0x2bc>)
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800191c:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	492c      	ldr	r1, [pc, #176]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	608b      	str	r3, [r1, #8]
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800192a:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	43db      	mvns	r3, r3
 8001932:	4928      	ldr	r1, [pc, #160]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001934:	4013      	ands	r3, r2
 8001936:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001944:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	4922      	ldr	r1, [pc, #136]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	60cb      	str	r3, [r1, #12]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001952:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	491e      	ldr	r1, [pc, #120]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800195c:	4013      	ands	r3, r2
 800195e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800196c:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	4918      	ldr	r1, [pc, #96]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	43db      	mvns	r3, r3
 8001982:	4914      	ldr	r1, [pc, #80]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001984:	4013      	ands	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d021      	beq.n	80019d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	490e      	ldr	r1, [pc, #56]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	600b      	str	r3, [r1, #0]
 80019a0:	e021      	b.n	80019e6 <HAL_GPIO_Init+0x2e2>
 80019a2:	bf00      	nop
 80019a4:	10320000 	.word	0x10320000
 80019a8:	10310000 	.word	0x10310000
 80019ac:	10220000 	.word	0x10220000
 80019b0:	10210000 	.word	0x10210000
 80019b4:	10120000 	.word	0x10120000
 80019b8:	10110000 	.word	0x10110000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40010000 	.word	0x40010000
 80019c4:	40010800 	.word	0x40010800
 80019c8:	40010c00 	.word	0x40010c00
 80019cc:	40011000 	.word	0x40011000
 80019d0:	40011400 	.word	0x40011400
 80019d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_GPIO_Init+0x304>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	43db      	mvns	r3, r3
 80019e0:	4909      	ldr	r1, [pc, #36]	@ (8001a08 <HAL_GPIO_Init+0x304>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	3301      	adds	r3, #1
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	fa22 f303 	lsr.w	r3, r2, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f47f ae8e 	bne.w	8001718 <HAL_GPIO_Init+0x14>
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	372c      	adds	r7, #44	@ 0x2c
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e001      	b.n	8001a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	807b      	strh	r3, [r7, #2]
 8001a46:	4613      	mov	r3, r2
 8001a48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a4a:	787b      	ldrb	r3, [r7, #1]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a50:	887a      	ldrh	r2, [r7, #2]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a56:	e003      	b.n	8001a60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	041a      	lsls	r2, r3, #16
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	611a      	str	r2, [r3, #16]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a7c:	887a      	ldrh	r2, [r7, #2]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4013      	ands	r3, r2
 8001a82:	041a      	lsls	r2, r3, #16
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	400b      	ands	r3, r1
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	611a      	str	r2, [r3, #16]
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e272      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8087 	beq.w	8001bca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001abc:	4b92      	ldr	r3, [pc, #584]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d00c      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac8:	4b8f      	ldr	r3, [pc, #572]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d112      	bne.n	8001afa <HAL_RCC_OscConfig+0x5e>
 8001ad4:	4b8c      	ldr	r3, [pc, #560]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae0:	d10b      	bne.n	8001afa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae2:	4b89      	ldr	r3, [pc, #548]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d06c      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x12c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d168      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e24c      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x76>
 8001b04:	4b80      	ldr	r3, [pc, #512]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a7f      	ldr	r2, [pc, #508]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e02e      	b.n	8001b70 <HAL_RCC_OscConfig+0xd4>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x98>
 8001b1a:	4b7b      	ldr	r3, [pc, #492]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a7a      	ldr	r2, [pc, #488]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b78      	ldr	r3, [pc, #480]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a77      	ldr	r2, [pc, #476]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e01d      	b.n	8001b70 <HAL_RCC_OscConfig+0xd4>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0xbc>
 8001b3e:	4b72      	ldr	r3, [pc, #456]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a71      	ldr	r2, [pc, #452]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0xd4>
 8001b58:	4b6b      	ldr	r3, [pc, #428]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a6a      	ldr	r2, [pc, #424]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b68      	ldr	r3, [pc, #416]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a67      	ldr	r2, [pc, #412]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d013      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fcac 	bl	80014d4 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff fca8 	bl	80014d4 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	@ 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e200      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	4b5d      	ldr	r3, [pc, #372]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0xe4>
 8001b9e:	e014      	b.n	8001bca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fc98 	bl	80014d4 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fc94 	bl	80014d4 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	@ 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1ec      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	4b53      	ldr	r3, [pc, #332]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x10c>
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d063      	beq.n	8001c9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd6:	4b4c      	ldr	r3, [pc, #304]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001be2:	4b49      	ldr	r3, [pc, #292]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d11c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x18c>
 8001bee:	4b46      	ldr	r3, [pc, #280]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d116      	bne.n	8001c28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	4b43      	ldr	r3, [pc, #268]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_RCC_OscConfig+0x176>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e1c0      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b3d      	ldr	r3, [pc, #244]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4939      	ldr	r1, [pc, #228]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	e03a      	b.n	8001c9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c30:	4b36      	ldr	r3, [pc, #216]	@ (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7ff fc4d 	bl	80014d4 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fc49 	bl	80014d4 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e1a1      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	4b2d      	ldr	r3, [pc, #180]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4927      	ldr	r1, [pc, #156]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
 8001c70:	e015      	b.n	8001c9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c72:	4b26      	ldr	r3, [pc, #152]	@ (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fc2c 	bl	80014d4 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff fc28 	bl	80014d4 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e180      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d03a      	beq.n	8001d20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d019      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb2:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fc0c 	bl	80014d4 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fc08 	bl	80014d4 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e160      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f000 fa9c 	bl	800221c <RCC_Delay>
 8001ce4:	e01c      	b.n	8001d20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cec:	f7ff fbf2 	bl	80014d4 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf2:	e00f      	b.n	8001d14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fbee 	bl	80014d4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d908      	bls.n	8001d14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e146      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	42420000 	.word	0x42420000
 8001d10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d14:	4b92      	ldr	r3, [pc, #584]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e9      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80a6 	beq.w	8001e7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d32:	4b8b      	ldr	r3, [pc, #556]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10d      	bne.n	8001d5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b88      	ldr	r3, [pc, #544]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4a87      	ldr	r2, [pc, #540]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	61d3      	str	r3, [r2, #28]
 8001d4a:	4b85      	ldr	r3, [pc, #532]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d56:	2301      	movs	r3, #1
 8001d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5a:	4b82      	ldr	r3, [pc, #520]	@ (8001f64 <HAL_RCC_OscConfig+0x4c8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d118      	bne.n	8001d98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d66:	4b7f      	ldr	r3, [pc, #508]	@ (8001f64 <HAL_RCC_OscConfig+0x4c8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f64 <HAL_RCC_OscConfig+0x4c8>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d72:	f7ff fbaf 	bl	80014d4 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7a:	f7ff fbab 	bl	80014d4 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b64      	cmp	r3, #100	@ 0x64
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e103      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	4b75      	ldr	r3, [pc, #468]	@ (8001f64 <HAL_RCC_OscConfig+0x4c8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d106      	bne.n	8001dae <HAL_RCC_OscConfig+0x312>
 8001da0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a6e      	ldr	r2, [pc, #440]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	e02d      	b.n	8001e0a <HAL_RCC_OscConfig+0x36e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x334>
 8001db6:	4b6a      	ldr	r3, [pc, #424]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4a69      	ldr	r2, [pc, #420]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6213      	str	r3, [r2, #32]
 8001dc2:	4b67      	ldr	r3, [pc, #412]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a66      	ldr	r2, [pc, #408]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	6213      	str	r3, [r2, #32]
 8001dce:	e01c      	b.n	8001e0a <HAL_RCC_OscConfig+0x36e>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d10c      	bne.n	8001df2 <HAL_RCC_OscConfig+0x356>
 8001dd8:	4b61      	ldr	r3, [pc, #388]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a60      	ldr	r2, [pc, #384]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	4b5e      	ldr	r3, [pc, #376]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4a5d      	ldr	r2, [pc, #372]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6213      	str	r3, [r2, #32]
 8001df0:	e00b      	b.n	8001e0a <HAL_RCC_OscConfig+0x36e>
 8001df2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a5a      	ldr	r2, [pc, #360]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	6213      	str	r3, [r2, #32]
 8001dfe:	4b58      	ldr	r3, [pc, #352]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4a57      	ldr	r2, [pc, #348]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d015      	beq.n	8001e3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fb5f 	bl	80014d4 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff fb5b 	bl	80014d4 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0b1      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e30:	4b4b      	ldr	r3, [pc, #300]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0ee      	beq.n	8001e1a <HAL_RCC_OscConfig+0x37e>
 8001e3c:	e014      	b.n	8001e68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fb49 	bl	80014d4 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7ff fb45 	bl	80014d4 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e09b      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5c:	4b40      	ldr	r3, [pc, #256]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1ee      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d105      	bne.n	8001e7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	4a3b      	ldr	r2, [pc, #236]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8087 	beq.w	8001f92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e84:	4b36      	ldr	r3, [pc, #216]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d061      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d146      	bne.n	8001f26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e98:	4b33      	ldr	r3, [pc, #204]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fb19 	bl	80014d4 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7ff fb15 	bl	80014d4 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e06d      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb8:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ecc:	d108      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ece:	4b24      	ldr	r3, [pc, #144]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4921      	ldr	r1, [pc, #132]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a19      	ldr	r1, [r3, #32]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	491b      	ldr	r1, [pc, #108]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7ff fae9 	bl	80014d4 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f06:	f7ff fae5 	bl	80014d4 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e03d      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x46a>
 8001f24:	e035      	b.n	8001f92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fad2 	bl	80014d4 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff face 	bl	80014d4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e026      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x498>
 8001f52:	e01e      	b.n	8001f92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e019      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40007000 	.word	0x40007000
 8001f68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <HAL_RCC_OscConfig+0x500>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0d0      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d910      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b67      	ldr	r3, [pc, #412]	@ (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 0207 	bic.w	r2, r3, #7
 8001fca:	4965      	ldr	r1, [pc, #404]	@ (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b63      	ldr	r3, [pc, #396]	@ (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0b8      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ffc:	4b59      	ldr	r3, [pc, #356]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a58      	ldr	r2, [pc, #352]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002006:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002014:	4b53      	ldr	r3, [pc, #332]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a52      	ldr	r2, [pc, #328]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800201e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002020:	4b50      	ldr	r3, [pc, #320]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	494d      	ldr	r1, [pc, #308]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d040      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b47      	ldr	r3, [pc, #284]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d115      	bne.n	800207e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e07f      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205e:	4b41      	ldr	r3, [pc, #260]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d109      	bne.n	800207e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e073      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206e:	4b3d      	ldr	r3, [pc, #244]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e06b      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207e:	4b39      	ldr	r3, [pc, #228]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f023 0203 	bic.w	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4936      	ldr	r1, [pc, #216]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002090:	f7ff fa20 	bl	80014d4 <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	e00a      	b.n	80020ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002098:	f7ff fa1c 	bl	80014d4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e053      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 020c 	and.w	r2, r3, #12
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	429a      	cmp	r2, r3
 80020be:	d1eb      	bne.n	8002098 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020c0:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d210      	bcs.n	80020f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 0207 	bic.w	r2, r3, #7
 80020d6:	4922      	ldr	r1, [pc, #136]	@ (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b20      	ldr	r3, [pc, #128]	@ (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e032      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fc:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4916      	ldr	r1, [pc, #88]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800211a:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	490e      	ldr	r1, [pc, #56]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800212e:	f000 f821 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8002132:	4602      	mov	r2, r0
 8002134:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	490a      	ldr	r1, [pc, #40]	@ (8002168 <HAL_RCC_ClockConfig+0x1c8>)
 8002140:	5ccb      	ldrb	r3, [r1, r3]
 8002142:	fa22 f303 	lsr.w	r3, r2, r3
 8002146:	4a09      	ldr	r2, [pc, #36]	@ (800216c <HAL_RCC_ClockConfig+0x1cc>)
 8002148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800214a:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <HAL_RCC_ClockConfig+0x1d0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff f97e 	bl	8001450 <HAL_InitTick>

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40022000 	.word	0x40022000
 8002164:	40021000 	.word	0x40021000
 8002168:	08002aac 	.word	0x08002aac
 800216c:	20000004 	.word	0x20000004
 8002170:	20000008 	.word	0x20000008

08002174 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800218e:	4b1e      	ldr	r3, [pc, #120]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x94>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b04      	cmp	r3, #4
 800219c:	d002      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x30>
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d003      	beq.n	80021aa <HAL_RCC_GetSysClockFreq+0x36>
 80021a2:	e027      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021a4:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_RCC_GetSysClockFreq+0x98>)
 80021a6:	613b      	str	r3, [r7, #16]
      break;
 80021a8:	e027      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	0c9b      	lsrs	r3, r3, #18
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	4a17      	ldr	r2, [pc, #92]	@ (8002210 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021b4:	5cd3      	ldrb	r3, [r2, r3]
 80021b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d010      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x94>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	0c5b      	lsrs	r3, r3, #17
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	4a11      	ldr	r2, [pc, #68]	@ (8002214 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <HAL_RCC_GetSysClockFreq+0x98>)
 80021d6:	fb03 f202 	mul.w	r2, r3, r2
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e004      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	613b      	str	r3, [r7, #16]
      break;
 80021f2:	e002      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021f4:	4b05      	ldr	r3, [pc, #20]	@ (800220c <HAL_RCC_GetSysClockFreq+0x98>)
 80021f6:	613b      	str	r3, [r7, #16]
      break;
 80021f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fa:	693b      	ldr	r3, [r7, #16]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	371c      	adds	r7, #28
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	007a1200 	.word	0x007a1200
 8002210:	08002abc 	.word	0x08002abc
 8002214:	08002acc 	.word	0x08002acc
 8002218:	003d0900 	.word	0x003d0900

0800221c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002224:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <RCC_Delay+0x34>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <RCC_Delay+0x38>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0a5b      	lsrs	r3, r3, #9
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002238:	bf00      	nop
  }
  while (Delay --);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	60fa      	str	r2, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f9      	bne.n	8002238 <RCC_Delay+0x1c>
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	20000004 	.word	0x20000004
 8002254:	10624dd3 	.word	0x10624dd3

08002258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e041      	b.n	80022ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe ff1e 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f000 fa5c 	bl	8002754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d001      	beq.n	8002310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e03a      	b.n	8002386 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a18      	ldr	r2, [pc, #96]	@ (8002390 <HAL_TIM_Base_Start_IT+0x98>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00e      	beq.n	8002350 <HAL_TIM_Base_Start_IT+0x58>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800233a:	d009      	beq.n	8002350 <HAL_TIM_Base_Start_IT+0x58>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a14      	ldr	r2, [pc, #80]	@ (8002394 <HAL_TIM_Base_Start_IT+0x9c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d004      	beq.n	8002350 <HAL_TIM_Base_Start_IT+0x58>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a13      	ldr	r2, [pc, #76]	@ (8002398 <HAL_TIM_Base_Start_IT+0xa0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d111      	bne.n	8002374 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b06      	cmp	r3, #6
 8002360:	d010      	beq.n	8002384 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0201 	orr.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002372:	e007      	b.n	8002384 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	40012c00 	.word	0x40012c00
 8002394:	40000400 	.word	0x40000400
 8002398:	40000800 	.word	0x40000800

0800239c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d020      	beq.n	8002400 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01b      	beq.n	8002400 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0202 	mvn.w	r2, #2
 80023d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f998 	bl	800271c <HAL_TIM_IC_CaptureCallback>
 80023ec:	e005      	b.n	80023fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f98b 	bl	800270a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f99a 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d020      	beq.n	800244c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01b      	beq.n	800244c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0204 	mvn.w	r2, #4
 800241c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f972 	bl	800271c <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f965 	bl	800270a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f974 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d020      	beq.n	8002498 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01b      	beq.n	8002498 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0208 	mvn.w	r2, #8
 8002468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2204      	movs	r2, #4
 800246e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f94c 	bl	800271c <HAL_TIM_IC_CaptureCallback>
 8002484:	e005      	b.n	8002492 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f93f 	bl	800270a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f94e 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d020      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01b      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0210 	mvn.w	r2, #16
 80024b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2208      	movs	r2, #8
 80024ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f926 	bl	800271c <HAL_TIM_IC_CaptureCallback>
 80024d0:	e005      	b.n	80024de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f919 	bl	800270a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f928 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00c      	beq.n	8002508 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0201 	mvn.w	r2, #1
 8002500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7fe fb4c 	bl	8000ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00c      	beq.n	800252c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fa7f 	bl	8002a2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00c      	beq.n	8002550 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f8f8 	bl	8002740 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00c      	beq.n	8002574 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0220 	mvn.w	r2, #32
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fa52 	bl	8002a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002574:	bf00      	nop
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_TIM_ConfigClockSource+0x1c>
 8002594:	2302      	movs	r3, #2
 8002596:	e0b4      	b.n	8002702 <HAL_TIM_ConfigClockSource+0x186>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025d0:	d03e      	beq.n	8002650 <HAL_TIM_ConfigClockSource+0xd4>
 80025d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025d6:	f200 8087 	bhi.w	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 80025da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025de:	f000 8086 	beq.w	80026ee <HAL_TIM_ConfigClockSource+0x172>
 80025e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025e6:	d87f      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	2b70      	cmp	r3, #112	@ 0x70
 80025ea:	d01a      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0xa6>
 80025ec:	2b70      	cmp	r3, #112	@ 0x70
 80025ee:	d87b      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f0:	2b60      	cmp	r3, #96	@ 0x60
 80025f2:	d050      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x11a>
 80025f4:	2b60      	cmp	r3, #96	@ 0x60
 80025f6:	d877      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f8:	2b50      	cmp	r3, #80	@ 0x50
 80025fa:	d03c      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0xfa>
 80025fc:	2b50      	cmp	r3, #80	@ 0x50
 80025fe:	d873      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002600:	2b40      	cmp	r3, #64	@ 0x40
 8002602:	d058      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002604:	2b40      	cmp	r3, #64	@ 0x40
 8002606:	d86f      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002608:	2b30      	cmp	r3, #48	@ 0x30
 800260a:	d064      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x15a>
 800260c:	2b30      	cmp	r3, #48	@ 0x30
 800260e:	d86b      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002610:	2b20      	cmp	r3, #32
 8002612:	d060      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002614:	2b20      	cmp	r3, #32
 8002616:	d867      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002618:	2b00      	cmp	r3, #0
 800261a:	d05c      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x15a>
 800261c:	2b10      	cmp	r3, #16
 800261e:	d05a      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002620:	e062      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002632:	f000 f974 	bl	800291e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	609a      	str	r2, [r3, #8]
      break;
 800264e:	e04f      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002660:	f000 f95d 	bl	800291e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002672:	609a      	str	r2, [r3, #8]
      break;
 8002674:	e03c      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002682:	461a      	mov	r2, r3
 8002684:	f000 f8d4 	bl	8002830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2150      	movs	r1, #80	@ 0x50
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f92b 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 8002694:	e02c      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026a2:	461a      	mov	r2, r3
 80026a4:	f000 f8f2 	bl	800288c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2160      	movs	r1, #96	@ 0x60
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f91b 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 80026b4:	e01c      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c2:	461a      	mov	r2, r3
 80026c4:	f000 f8b4 	bl	8002830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2140      	movs	r1, #64	@ 0x40
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f90b 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 80026d4:	e00c      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f000 f902 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 80026e6:	e003      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
      break;
 80026ec:	e000      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
	...

08002754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a2f      	ldr	r2, [pc, #188]	@ (8002824 <TIM_Base_SetConfig+0xd0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00b      	beq.n	8002784 <TIM_Base_SetConfig+0x30>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002772:	d007      	beq.n	8002784 <TIM_Base_SetConfig+0x30>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a2c      	ldr	r2, [pc, #176]	@ (8002828 <TIM_Base_SetConfig+0xd4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d003      	beq.n	8002784 <TIM_Base_SetConfig+0x30>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a2b      	ldr	r2, [pc, #172]	@ (800282c <TIM_Base_SetConfig+0xd8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d108      	bne.n	8002796 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800278a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a22      	ldr	r2, [pc, #136]	@ (8002824 <TIM_Base_SetConfig+0xd0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00b      	beq.n	80027b6 <TIM_Base_SetConfig+0x62>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027a4:	d007      	beq.n	80027b6 <TIM_Base_SetConfig+0x62>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002828 <TIM_Base_SetConfig+0xd4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d003      	beq.n	80027b6 <TIM_Base_SetConfig+0x62>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a1e      	ldr	r2, [pc, #120]	@ (800282c <TIM_Base_SetConfig+0xd8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d108      	bne.n	80027c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002824 <TIM_Base_SetConfig+0xd0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d103      	bne.n	80027fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f023 0201 	bic.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	611a      	str	r2, [r3, #16]
  }
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40000400 	.word	0x40000400
 800282c:	40000800 	.word	0x40000800

08002830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f023 0201 	bic.w	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800285a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f023 030a 	bic.w	r3, r3, #10
 800286c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	621a      	str	r2, [r3, #32]
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	f023 0210 	bic.w	r2, r3, #16
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80028b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	031b      	lsls	r3, r3, #12
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80028c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	621a      	str	r2, [r3, #32]
}
 80028e0:	bf00      	nop
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	f043 0307 	orr.w	r3, r3, #7
 800290c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	609a      	str	r2, [r3, #8]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800291e:	b480      	push	{r7}
 8002920:	b087      	sub	sp, #28
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002938:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	021a      	lsls	r2, r3, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	431a      	orrs	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4313      	orrs	r3, r2
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	609a      	str	r2, [r3, #8]
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002970:	2302      	movs	r3, #2
 8002972:	e046      	b.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800299a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a16      	ldr	r2, [pc, #88]	@ (8002a0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00e      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029c0:	d009      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a12      	ldr	r2, [pc, #72]	@ (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d004      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a10      	ldr	r2, [pc, #64]	@ (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10c      	bne.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40012c00 	.word	0x40012c00
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40000800 	.word	0x40000800

08002a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <memset>:
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4402      	add	r2, r0
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d100      	bne.n	8002a46 <memset+0xa>
 8002a44:	4770      	bx	lr
 8002a46:	f803 1b01 	strb.w	r1, [r3], #1
 8002a4a:	e7f9      	b.n	8002a40 <memset+0x4>

08002a4c <__libc_init_array>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2600      	movs	r6, #0
 8002a50:	4d0c      	ldr	r5, [pc, #48]	@ (8002a84 <__libc_init_array+0x38>)
 8002a52:	4c0d      	ldr	r4, [pc, #52]	@ (8002a88 <__libc_init_array+0x3c>)
 8002a54:	1b64      	subs	r4, r4, r5
 8002a56:	10a4      	asrs	r4, r4, #2
 8002a58:	42a6      	cmp	r6, r4
 8002a5a:	d109      	bne.n	8002a70 <__libc_init_array+0x24>
 8002a5c:	f000 f81a 	bl	8002a94 <_init>
 8002a60:	2600      	movs	r6, #0
 8002a62:	4d0a      	ldr	r5, [pc, #40]	@ (8002a8c <__libc_init_array+0x40>)
 8002a64:	4c0a      	ldr	r4, [pc, #40]	@ (8002a90 <__libc_init_array+0x44>)
 8002a66:	1b64      	subs	r4, r4, r5
 8002a68:	10a4      	asrs	r4, r4, #2
 8002a6a:	42a6      	cmp	r6, r4
 8002a6c:	d105      	bne.n	8002a7a <__libc_init_array+0x2e>
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a74:	4798      	blx	r3
 8002a76:	3601      	adds	r6, #1
 8002a78:	e7ee      	b.n	8002a58 <__libc_init_array+0xc>
 8002a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7e:	4798      	blx	r3
 8002a80:	3601      	adds	r6, #1
 8002a82:	e7f2      	b.n	8002a6a <__libc_init_array+0x1e>
 8002a84:	08002ad0 	.word	0x08002ad0
 8002a88:	08002ad0 	.word	0x08002ad0
 8002a8c:	08002ad0 	.word	0x08002ad0
 8002a90:	08002ad4 	.word	0x08002ad4

08002a94 <_init>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	bf00      	nop
 8002a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9a:	bc08      	pop	{r3}
 8002a9c:	469e      	mov	lr, r3
 8002a9e:	4770      	bx	lr

08002aa0 <_fini>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr
